{"meta":{"title":"Hu","subtitle":"","description":"Welcome!","author":"Hu","url":"https://humancloud.github.io","root":"/"},"pages":[{"title":"分类","date":"2020-04-05T05:10:56.000Z","updated":"2020-04-05T05:13:47.982Z","comments":true,"path":"categories/index.html","permalink":"https://humancloud.github.io/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-04-05T05:10:45.000Z","updated":"2020-04-05T05:14:19.486Z","comments":true,"path":"tags/index.html","permalink":"https://humancloud.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Git基础总结","slug":"Git基础总结","date":"2020-11-03T08:19:45.000Z","updated":"2020-11-03T08:24:18.699Z","comments":true,"path":"2020/11/03/Git基础总结/","link":"","permalink":"https://humancloud.github.io/2020/11/03/Git%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/","excerpt":"前言Git基础使用: 基础命令(修改,远程操作),分支合并,解决冲突,标签","text":"前言Git基础使用: 基础命令(修改,远程操作),分支合并,解决冲突,标签 1.基础操作 12345678910111213141516171819202122232425工作区: 电脑里能看到的目录暂存区: 英文为stage或index,一般存放在.git目录下的index文件(.git&#x2F;index)中,所以我们把暂存区有时也叫作索引index版本库(仓库区): 工作区有一个隐藏目录.git,这个不算工作区,而是Git的版本库图中左侧为工作区，右侧为版本库。在版本库中标记为 &quot;index&quot; 的区域是暂存区（stage&#x2F;index），标记为 &quot;master&quot; 的是 master 分支所代表的目录树。图中我们可以看出此时 &quot;HEAD&quot; 实际是指向 master 分支的一个&quot;游标&quot;。所以图示的命令中出现 HEAD 的地方可以用 master 来替换。图中的 objects 标识的区域为 Git 的对象库，实际位于 &quot;.git&#x2F;objects&quot; 目录下，里面包含了创建的各种对象及内容。当对工作区修改（或新增）的文件执行 git add 命令时，暂存区的目录树被更新，同时工作区修改（或新增）的文件内容被写入到对象库中的一个新的对象中，而该对象的ID被记录在暂存区的文件索引中。当执行提交操作（git commit）时，暂存区的目录树写到版本库（对象库）中，master 分支会做相应的更新。即 master 指向的目录树就是提交时暂存区的目录树。当执行 git reset HEAD 命令时，暂存区的目录树会被重写，被 master 分支指向的目录树所替换，但是工作区不受影响。当执行 git rm --cached &lt;file&gt; 命令时，会直接从暂存区删除文件，工作区则不做出改变。当执行 git checkout . 或者 git checkout -- &lt;file&gt; 命令时，会用暂存区全部或指定的文件替换工作区的文件。这个操作很危险，会清除工作区中未添加到暂存区的改动。当执行 git checkout HEAD . 或者 git checkout HEAD &lt;file&gt; 命令时，会用 HEAD 指向的 master 分支中的全部或者部分文件替换暂存区和以及工作区中的文件。这个命令也是极具危险性的，因为不但会清除工作区中未提交的改动，也会清除暂存区中未提交的改动。 1. 1 最简单使用12345678910111213git config --global user.name &#39;humancloud&#39;git config --global user.email &#39;humancloud@126.com&#39;git init 版本区建立(创建.git文件)git add . 把工作区所有文件提交到版本区里的暂存区git commit -m &quot;xxx&quot; 暂存区所以文件提交到仓库区(暂存区空)git remote add origin xxxxxx.git 把本地仓库与远程仓库连接起来git push -u origin master 把仓库区文件提交到远程仓库里(将本地的master分支推送到origin主机,同时指定origin为默认主机))平常:git add .git commit -m &quot;regular&quot;git push -u origin master 最简单操作 123456789101112131415161718192021➜ calculator git:(master) ✗ git add a.c 添加到暂存区➜ calculator git:(master) ✗ git commit -m &quot;first&quot; 将文件从暂存区提交到仓库➜ calculator git:(master) ✗ git remote add origin https:&#x2F;&#x2F;github.com&#x2F;humancloud&#x2F;c.git &#x2F;&#x2F;将本地仓库同步到远程仓库➜ calculator git:(master) ✗ git push -u origin master Username for &#39;https:&#x2F;&#x2F;github.com&#39;: humancloudPassword for &#39;https:&#x2F;&#x2F;humancloud@github.com&#39;: 对象计数中: 5, 完成.Delta compression using up to 8 threads.压缩对象中: 100% (2&#x2F;2), 完成.写入对象中: 100% (5&#x2F;5), 1.72 KiB | 1.72 MiB&#x2F;s, 完成.Total 5 (delta 0), reused 0 (delta 0)To https:&#x2F;&#x2F;github.com&#x2F;humancloud&#x2F;c.git * [new branch] master -&gt; master分支 &#39;master&#39; 设置为跟踪来自 &#39;origin&#39; 的远程分支 &#39;master&#39;。➜ calculator git:(master) ✗ ➜ calculator git:(master) ✗ git rm -r . &#x2F;&#x2F;删除暂存区和工作区(本地的文件哦)的文件➜ calculator git:(master) ✗ git commit -m &quot;xxx&quot; &#x2F;&#x2F;提交修改➜ calculator git:(master) ✗ git push -u origin master &#x2F;&#x2F;提交修改到远程仓库执行此三条后远程仓库和本地所有都被删除,要想不删除本地的,执行这个➜ calculator git:(master) ✗ git rm --cache . &#x2F;&#x2F;只会删除暂存区的,不会删除工作区 1234Git 常用的是以下 6 个命令：git clone、git push、git add 、git commit、git checkout、git pull➜ calculator git:(master) ✗ git status 查看状态 1.2 创建仓库init 1git init 命用于在目录中创建新的 Git 仓库。 clone 1➜ calculator git:(master) ✗ git clone 拷贝一个远程仓库,将复制该项目的所有记录 1.3 提交与修改add 1234567添加文件到仓库git add [file1] [file2] ...git add [dir]git add . 添加当前目录所有文件到暂存区 status 1git status 命令用于查看在你上次提交之后是否有对文件进行再次修改。显示有变更的文件 diff 1234567891011121314比较文件的不同,即暂存区和工作区的差异显示暂存区和工作区的差异:$ git diff [file]显示暂存区和上一次提交(commit)的差异:$ git diff --cached [file]或$ git diff --staged [file]显示两次提交之间的差异:$ git diff [first-branch]...[second-branch] commit 123456提交暂存区到本地仓库git commit -m &quot;有用的信息每次都不一样&quot;git commit [file1] [file2] -m &quot;xxxxxx&quot; reset 12345678910111213141516171819202122232425262728293031git reset [HEAD] 回溯版本--mixed 为默认，可以不用带该参数，用于重置暂存区的文件与上一次的提交(commit)保持一致，工作区文件内容保持不变。--soft 参数用于回退到某个版本：--hard 参数撤销工作区中所有未提交的修改内容，将暂存区与工作区都回到上一次版本，并删除之前的所有信息提交：撤销版本库的修改(暂存区,工作区不变): git reset --soft [HEAD]撤销版本库和暂存区不修改工作区: git reset --mixed [HEAD]将工作区,暂存区,版本库恢复到指定的版本:git reset --hard [HEAD]HEAD 表示当前版本HEAD^ 上一个版本HEAD^^ 上上一个版本HEAD^^^ 上上上一个版本以此类推...可以使用 ～数字表示HEAD~0 表示当前版本HEAD~1 上一个版本HEAD^2 上上一个版本HEAD^3 上上上一个版本以此类推... rm 123456789101、将文件从暂存区和工作区中删除：git rm &lt;file&gt;如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项 -f。强行从暂存区和工作区中删除修改后的 runoob.txt 文件：git rm -f runoob.txt 如果想把文件从暂存区域移除，但仍然希望保留在当前工作目录中，换句话说，仅是从跟踪清单中删除，使用 --cached 选项即可：git rm --cached &lt;file&gt; mv 1234567git mv 命令用于移动或重命名一个文件、目录或软连接。(操作暂存区)git mv [file] [newfile]如果新文件名已经存在，但还是要重命名它，可以使用 -f 参数：git mv -f [file] [newfile] checkout 123456789git checkout（1）.切换或者新建分支。（2）.将暂存区或者指定commit内容覆盖到工作区。➜ calculator git:(master) ✗ git checkout --file 用版本区的版本替换工作区的版本 1.2 日志12345678910111213141516171819git log这个最上面的是最近的提交,这串数字就是版本库IDcommit d2c6f0ca1e7c075692c55870f4166b1e297dfcea (HEAD -&gt; master)Author: humancloud &lt;humancloud@126.com&gt;Date: Sat May 2 19:05:43 2020 +0800 regular git log --author&#x3D;xxx 查找指定用户的提交日志git blame &lt;file&gt; 查看指定文件的修改纪录我们可以用 --oneline 选项来查看历史记录的简洁的版本还可以用 --graph 选项，查看历史中什么时候出现了分支、合并也可以用 --reverse 参数来逆向显示所有日志。 1.3 远程操作remote 123456789101112remote常用的origin是远程仓库的别名[name],可以使用任何名字➜ calculator git:(master) ✗ git remote -v 查看远程仓库➜ calculator git:(master) ✗ git remote add [name] [url] 添加远程仓库(github和gitee一个本地可以有几个远程仓库)➜ calculator git:(master) ✗ git remote show https:&#x2F;&#x2F;github.com&#x2F;tian&#x2F;runoob 显示仓库信息➜ calculator git:(master) ✗ git remote set-url --push [name] [new url] 修改远程仓库 ➜ calculator git:(master) ✗ git remote rm [name] 删除远程仓库➜ calculator git:(master) ✗ git remote rename oldname newname 修改仓库名➜ calculator git:(master) ✗ git push -u [name] [branch] &#x2F;&#x2F;向[name]这个仓库的[branch]分支push fentch 1234567891011121314git fetch 命令用于从远程获取代码库。该命令执行完后需要执行 git merge 远程分支到你所在的分支。从远端仓库提取数据并尝试合并到当前分支：假设你配置好了一个远程仓库，并且你想要提取更新的数据，你可以首先执行:git fetch [name] &#x2F;&#x2F;name是仓库别名,这条命令告诉 Git 去获取它有你没有的数据，然后你可以执行git merge [name] [branch]例如 git merge origin master &#x2F;&#x2F;从origin仓库下载更新合并到我的master分支以上命令将服务器上的任何更新（假设有人这时候推送到服务器了）合并到你的当前分支。 pull 12345678910111213141516git pull 命用于从远程获取代码并合并本地的版本。git pull 其实就是 git fetch 和 git merge FETCH_HEAD 的简写更新操作：$ git pull 把最新的提交从远程仓库抓取下来,在本地合并,克隆下项目来,如果想要更新项目,直接git pull 把最新的项目拉下来,即可.$ git pull origin将远程主机 origin 的 master 分支拉取过来，与本地的 brantest 分支合并。$ git pull origin master:brantest如果远程分支是与当前分支合并，则冒号后面的部分可以省略。$ git pull origin master push 12345678910111213141516git push 命用于从将本地的分支版本上传到远程并合并。以下命令将本地的 master 分支推送到 origin 主机的 master 分支。$ git push origin master相等于：$ git push origin master:master如果本地版本与远程版本有差异，但又要强制推送可以使用 --force 参数：git push --force origin master删除主机分支可以使用 --delete 参数，以下命令表示删除 origin 主机的 master 分支：git push origin --delete master 2.分支与合并创建自己的分支,开发完毕后,再一次性合并到原来的分支上,即安全又不影响别人工作, 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051git init 会默认创建master分支➜ calculator git:(master) ✗ git branch other 新建other分支➜ calculator git:(master) ✗ git checkout other 切换到other分支,当你切换分支的时候，Git 会用该分支的最后提交的快照替换你的工作目录的内容，也就是如果本来master分支下commit的文件,切换分支时git会把master分支commit的文件制作快照,把本地文件切换为other分支里commit的文件.这样你不需要自己创建目录,存放其他分支的文件,注意工作区和暂存区不会这样,如果master有文件没有被commit那么切换分支时此文件也会出现在新的分支里,并且两个分支共享此文件所以为了两个分支不影响,应当将本分支所有文件commit后再切换分支实例:[root@ecs-x-medium-2-linux-20200315145740 gittest]# lsmain.c[root@ecs-x-medium-2-linux-20200315145740 gittest]# git add main.c[root@ecs-x-medium-2-linux-20200315145740 gittest]# git commit -m &quot;commit main.c on master&quot;[master 4c7e832] commit main.c on master1 file changed, 5 insertions(+)create mode 100644 main.c[root@ecs-x-medium-2-linux-20200315145740 gittest]# git checkout otherSwitched to branch &#39;other&#39;[root@ecs-x-medium-2-linux-20200315145740 gittest]# ls #main.c没有出现在other分支里[root@ecs-x-medium-2-linux-20200315145740 gittest]# vim other.txt[root@ecs-x-medium-2-linux-20200315145740 gittest]# git add .[root@ecs-x-medium-2-linux-20200315145740 gittest]# git commit -m &quot;other.txt commit on branch other&quot;[other a98fc2b] other.txt commit on branch other1 file changed, 1 insertion(+)create mode 100644 other.txt[root@ecs-x-medium-2-linux-20200315145740 gittest]# lsother.txt[root@ecs-x-medium-2-linux-20200315145740 gittest]# git checkout masterSwitched to branch &#39;master&#39;[root@ecs-x-medium-2-linux-20200315145740 gittest]# ls #other.txt没有出现在master分支里main.c[root@ecs-x-medium-2-linux-20200315145740 gittest]# vim a.a[root@ecs-x-medium-2-linux-20200315145740 gittest]# git add a.a[root@ecs-x-medium-2-linux-20200315145740 gittest]# git checkout otherA a.aSwitched to branch &#39;other&#39;[root@ecs-x-medium-2-linux-20200315145740 gittest]# ls #a.a出现在新分支里a.a other.txt[root@ecs-x-medium-2-linux-20200315145740 gittest]#➜ calculator git:(master) ✗ git add ➜ calculator git:(master) ✗ git commit -m &quot;xxx&quot; &#x2F;&#x2F;在other分支提交➜ calculator git:(master) ✗ git checkout master 切换回master➜ calculator git:(master) ✗ git branch 查看分支➜ calculator git:(master) ✗ ➜ calculator git:(master) ✗ git merge other 合并other分支到当前所在分支➜ calculator git:(master) ✗ git branch -d other 删除other分支➜ calculator git:(master) ✗ 冲突 123456789101112git merge 可能会发生冲突1、git merge冲突了，根据提示找到冲突的文件，解决冲突,如果文件有冲突，那么会有类似的标记2、修改完之后，执行git add冲突文件名,告诉 Git 文件冲突已经解决3、git commit注意:没有-m选项进去类似于vim的操作界面，把conflict相关的行删除掉4. 这就解决了冲突,并将新的master分支内容commit到仓库区 实例 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121制造冲突:两个分支commit的文件里有相同文件名的文件即会发生冲突[root@ecs-x-medium-2-linux-20200315145740 gittest]# git branch * masterother[root@ecs-x-medium-2-linux-20200315145740 gittest]# lsconfltest.txt main.c[root@ecs-x-medium-2-linux-20200315145740 gittest]# cat confltest.txt this is a test , a file on master[root@ecs-x-medium-2-linux-20200315145740 gittest]# git add confltest.txt [root@ecs-x-medium-2-linux-20200315145740 gittest]# git commit -m &quot;this is a commit on master&quot; [master 8bba54d] this is a commit on master1 file changed, 1 insertion(+)create mode 100644 confltest.txt[root@ecs-x-medium-2-linux-20200315145740 gittest]# git checkout otherSwitched to branch &#39;other&#39;[root@ecs-x-medium-2-linux-20200315145740 gittest]# lsother.txt[root@ecs-x-medium-2-linux-20200315145740 gittest]# touch confltest.txt[root@ecs-x-medium-2-linux-20200315145740 gittest]# vim confltest.txt[root@ecs-x-medium-2-linux-20200315145740 gittest]# cat confltest.txtlalala , i am branch other[root@ecs-x-medium-2-linux-20200315145740 gittest]# git add confltest.txt[root@ecs-x-medium-2-linux-20200315145740 gittest]# git commit -m &quot;this is branch other&quot;[other 0423971] this is branch other1 file changed, 1 insertion(+)create mode 100644 confltest.txt[root@ecs-x-medium-2-linux-20200315145740 gittest]# git checkout masterSwitched to branch &#39;master&#39;[root@ecs-x-medium-2-linux-20200315145740 gittest]# git merge other #看到发生冲突Auto-merging confltest.txtCONFLICT (add&#x2F;add): Merge conflict in confltest.txtAutomatic merge failed; fix conflicts and then commit the result.解决冲突[root@ecs-x-medium-2-linux-20200315145740 gittest]# ls confltest.txt main.c other.txt可以看到合并已经完成了,但是两个文件名相同的文件怎么就剩下一个了那 ?打开冲突文件(即confltest.txt)[root@ecs-x-medium-2-linux-20200315145740 gittest]# cat confltest.txt &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEADthis is a test , a file on master&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;lalala , i am branch other&gt;&gt;&gt;&gt;&gt;&gt;&gt; other发现里面有格式冲突文件的格式基本如下&lt;&lt;&lt;&lt;&lt;&lt;&lt;到&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 是在当前分支合并之前的文件内容&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;到&gt;&gt;&gt;&gt;&gt;&gt;&gt; other 是在other分支下该文件的内容此时我们需要手动修改此文件,将冲突消除[root@ecs-x-medium-2-linux-20200315145740 gittest]# vim confltest.txt #手动修改冲突[root@ecs-x-medium-2-linux-20200315145740 gittest]# cat confltest.txt #修改之后文件内容this is a test , a file on masterlalala , i am branch other我手动将两个文件内容放在了一起,将特殊符号删除,此时冲突消失执行下面两条[root@ecs-x-medium-2-linux-20200315145740 gittest]# git add confltest.txt[root@ecs-x-medium-2-linux-20200315145740 gittest]# git commit[master 229dd70] Merge branch &#39;other&#39;此时进入类似vim的界面,内容如下:Merge branch &#39;other&#39;Conflicts:confltest.txt## It looks like you may be committing a merge.# If this is not correct, please remove the file# .git&#x2F;MERGE_HEAD# and try again.# Please enter the commit message for your changes. Lines starting# with &#39;#&#39; will be ignored, and an empty message aborts the commit.# On branch master# All conflicts fixed but you are still merging.# (use &quot;git commit&quot; to conclude merge)## Changes to be committed:## modified: confltest.txt# new file: other.txt#需要删掉下面这两行Conflicts:confltest.txt然后保存退出,此时合并良好完成,且合并后的master分支里面的文件都已经commit到了仓库区,工作完成,此时可直接push到远程仓库啦验证一下:可以看到,工作区新添加的文件也commit到了仓库区,就是合并后的新的master分支的内容都到了master的仓库区[root@ecs-x-medium-2-linux-20200315145740 gittest]# git status# On branch masternothing to commit, working directory clean[root@ecs-x-medium-2-linux-20200315145740 gittest]# git add .[root@ecs-x-medium-2-linux-20200315145740 gittest]# git commit -m &quot;test&quot;# On branch masternothing to commit, working directory clean[root@ecs-x-medium-2-linux-20200315145740 gittest]# lsconfltest.txt main.c other.txt[root@ecs-x-medium-2-linux-20200315145740 gittest]# 3.标签12345678910111213141516171819202122232425262728如果你达到一个重要的阶段，并希望永远记住那个特别的提交快照，你可以使用 git tag 给它打上标签。比如说，我们想为我们的 runoob 项目发布一个&quot;1.0&quot;版本。 我们可以用 git tag -a v1.0 命令给最新一次提交打上（HEAD）&quot;v1.0&quot;的标签。-a 选项意为&quot;创建一个带注解的标签&quot;。 不用 -a 选项也可以执行的，但它不会记录这标签是啥时候打的，谁打的，也不会让你添加个标签的注解。 我推荐一直创建带注解的标签。使用:当你执行 git tag -a 命令时，Git 会打开你的编辑器，让你写一句标签注解，就像你给提交写注解一样。现在，注意当我们执行 git log --decorate 时，我们可以看到我们的标签了如果我们忘了给某个提交打标签，又将它发布了，我们可以给它追加标签。git tag -a v0.9 85fc7e7查看所有标签使用: git tag指定标签信息命令： git tag -a &lt;tagname&gt; -m &quot;runoob.com标签&quot;PGP签名标签命令： git tag -s &lt;tagname&gt; -m &quot;runoob.com标签&quot;","categories":[{"name":"Git","slug":"Git","permalink":"https://humancloud.github.io/categories/Git/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"https://humancloud.github.io/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"C语言宏实现max","slug":"C语言宏实现max","date":"2020-10-04T14:13:00.000Z","updated":"2020-11-13T03:03:31.461Z","comments":true,"path":"2020/10/04/C语言宏实现max/","link":"","permalink":"https://humancloud.github.io/2020/10/04/C%E8%AF%AD%E8%A8%80%E5%AE%8F%E5%AE%9E%E7%8E%B0max/","excerpt":"前言C语言宏功能强大,但一不小心就会用错,许多经典书籍都曾讲过C语言宏的强大功能,此篇文章是参考C陷阱与缺陷书籍和网上其他文章总结的","text":"前言C语言宏功能强大,但一不小心就会用错,许多经典书籍都曾讲过C语言宏的强大功能,此篇文章是参考C陷阱与缺陷书籍和网上其他文章总结的 根据书籍写此篇文章 编程常用宏(常更新)max函数宏 12345错误版#define max(a,b) ((a)&gt;(b))?(a):(b)a或b会被计算两次,如果每次计算a或b都改变,那么最后得到的结果与预想中的会不同 123456789Linux Kernel 版#define max(x,y) (&#123; \\ typeof(x) _max1 = (x); \\ typeof(y) _max2 = (y); \\ (void)(&amp;_max1 == &amp;_max2); \\ _max1 &gt; _max2 ? _max1:_max2;&#125;)x或y只会被计算一次 assert宏 , swap宏","categories":[{"name":"C语言","slug":"C语言","permalink":"https://humancloud.github.io/categories/C%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"https://humancloud.github.io/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"pip更换国内源","slug":"pip","date":"2020-03-09T04:33:07.000Z","updated":"2020-11-18T06:58:33.693Z","comments":true,"path":"2020/03/09/pip/","link":"","permalink":"https://humancloud.github.io/2020/03/09/pip/","excerpt":"","text":"pip更换国内源可加快下载速度 步骤 12345678mkdir ~/.pipvim ~/.pip/pip.conf打开文件后,输入以下信息,即可使用清华源[global]index-url = https://pypi.tuna.tsinghua.edu.cn/simple[install]trusted-host = https://pypi.tuna.tsinghua.edu.cn 使用easy_install来安装模块 1234567easy_install 换源cd /root 注意要放到/root目录下vi .pydistutils.cfg 打开配置文件[easy_install]index-url=http://mirrors.aliyun.com/pypi/simple/find-links=http://mirrors.aliyun.com/pypi/simple/","categories":[],"tags":[]}],"categories":[{"name":"Git","slug":"Git","permalink":"https://humancloud.github.io/categories/Git/"},{"name":"C语言","slug":"C语言","permalink":"https://humancloud.github.io/categories/C%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"https://humancloud.github.io/tags/%E7%AC%94%E8%AE%B0/"}]}