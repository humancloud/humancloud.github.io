{"meta":{"title":"Hu","subtitle":"","description":"Welcome!","author":"Hu","url":"https://humancloud.github.io","root":"/"},"pages":[{"title":"分类","date":"2020-04-05T05:10:56.000Z","updated":"2020-04-05T05:13:47.982Z","comments":true,"path":"categories/index.html","permalink":"https://humancloud.github.io/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-04-05T05:10:45.000Z","updated":"2020-04-05T05:14:19.486Z","comments":true,"path":"tags/index.html","permalink":"https://humancloud.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"1984IOCCC代码解析","slug":"IOCCC1984-01","date":"2020-11-18T09:39:39.000Z","updated":"2020-11-18T12:20:22.389Z","comments":true,"path":"2020/11/18/IOCCC1984-01/","link":"","permalink":"https://humancloud.github.io/2020/11/18/IOCCC1984-01/","excerpt":"anonymous.c时间: 1984作者: 作者匿名提交了此代码","text":"anonymous.c时间: 1984作者: 作者匿名提交了此代码 源代码: 12int i;main()&#123;for(;i[\"]&lt;i;++i)&#123;--i;&#125;\"];read('-'-'-',i+++\"hell\\o, world!\\n\",'/'/'/'));&#125;read(j,i,p)&#123;write(j/p+p,i---j,i/i);&#125; 1. 解析1.1 初步手动格式化123456789101112131415int i; main()&#123; for(;i[\"]&lt;i;++i) //如果编辑器没有高亮,还是不容易看出来这里的格式化不对,其实这里是作者故意迷惑你的 &#123; --i; &#125; \"]; read('-'-'-',i+++\"hello, world!\\n\",'/'/'/'));&#125;read(j,i,p)&#123; write(j/p+p,i---j,i/i);&#125; 1.2 更容易理解的格式1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677#define STR \"]&lt;i;++i)&#123;--i;&#125;\"int i;int main()&#123; for(;STR[i];read(0,\"hello,world!\\n\"+i++,1)) // '-' - '-' (是两个字符相减)为0, '/' / '/' (两个字符相除)为1 arr[1] 相当于 1[arr] 运算结果相同 ; // 当STR[i] 为0时循环结束即当字符串到结束符时结束循环(一共14次循环)&#125; // 字符串字面值是字符串的首地址,\"hello,world!\\n\" + i++ 的值就是字符串的第i个字符int read(int j,int i,int p)&#123; write(1,i--,1); // i-- i先被使用后自减, 然而每次函数调用i都更新,所以i减不减1都与最后结果无任何关系 // STDIN_FILENO 0, STDOUT_FILENO 1, STDERR_FILENO 2&#125;循环14次,\"hello,world!\\n\"一个14个字符(字符串末尾有空字符'\\0'),每一个字符都使用write系统调用输出到标准输出STDOUT_FILENO程序功能就是输出hello,world!\\n但是在某些机器上运行,没有结果输出(在我的机器上测试时也没有输出)(原因见下面的疑问与解答)``` ----## 2. 疑问与解答1. 为什么write函数当做系统调用,read不被当做系统调用那? 由于read函数在源文件中有自己的定义所以不会被当做系统调用.2. 为什么没有输出也没有报错那?```c我运行代码发现程序并没有输出我们期望的hello,world!,而是什么也没有输出.原因:\"hello,world!\\n\" + i++ 得到的是一个指针,这个指针指针指向一个字符,write系统调用第二个参数也是一个char指针,但是此代码read函数过程中将指针转为int,write函数中再将int转回指针,由于64位机器,指针占8字节,整数占4字节,所以数据一定会丢失,指针将不再正确,write系统调用会失败,而程序并没有检查write系统调用是否正确执行,所以看起来没有报错.加上错误处理:#include &lt;stdio.h&gt;int i;main()&#123; for(; i[\"]&lt;i;++i)&#123;--i;&#125;\"]; read('-'-'-',i+++\"hello, world!\\n\",'/'/'/'));&#125;read(j,i,p) &#123; int n = write(j/p+p,i---j,i/i); if(-1 == n)&#123; perror(\"write\"); &#125;&#125;输出:➜ anonymous git:(master) ./mytestwrite: Bad addresswrite: Bad addresswrite: Bad addresswrite: Bad addresswrite: Bad addresswrite: Bad addresswrite: Bad addresswrite: Bad addresswrite: Bad addresswrite: Bad addresswrite: Bad addresswrite: Bad addresswrite: Bad addresswrite: Bad address如果你的机器是32位的,那么指针和int都是四字节,相互转换不会有问题 下面使用gdb调试继续分析上个问题123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051使用此代码:1 #include &lt;stdio.h&gt;2 int i;3 main()4 &#123;5 for(; i[\"]&lt;i;++i)&#123;--i;&#125;\"]; read('-'-'-',i+++\"hello, world!\\n\",'/'/'/'));6 &#125;78 read(j,i,p) 9 &#123;10 int n = write(j/p+p,i---j,i/i);11 if(-1 == n)&#123;12 perror(\"write\");13 &#125;14&#125;➜ anonymous git:(master) gcc anonymous.c -o anonymous -g➜ anonymous git:(master) gdb anonymous(gdb) b 5Breakpoint 1 at 0x114d: file mytest.c, line 5.(gdb) b 10Breakpoint 2 at 0x11b0: file mytest.c, line 10.(gdb) rStarting program: /home/lu/code/c/IOCCC/1984/anonymous/mytestBreakpoint 1, main () at mytest.c:55 for(; i[\"]&lt;i;++i)&#123;--i;&#125;\"]; read('-'-'-',i+++\"hello, world!\\n\",'/'/'/'));(gdb) x/14b \"hello, world!\\n\"0x5555555592a0: 104 101 108 108 111 44 32 1190x5555555592a8: 111 114 108 100 33 10(gdb) nBreakpoint 2, read (j=0, i=1431658500, p=1) at mytest.c:1010 int n = write(j/p+p,i---j,i/i);(gdb) info argsj = 0i = 1431658500p = 1可以看到字符串首地址为0x5555555592a0read函数的第二个参数i的值为1431658500 -&gt; 0x55556003指针的值: 0x55 55 55 55 92 a0 00 00转为int后的值: 0x55 55 60 03明显看到丢失了数据","categories":[{"name":"IOCCC","slug":"IOCCC","permalink":"https://humancloud.github.io/categories/IOCCC/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"https://humancloud.github.io/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"C语言常用宏实现","slug":"C语言常用宏","date":"2020-10-04T14:13:00.000Z","updated":"2020-11-18T09:32:10.233Z","comments":true,"path":"2020/10/04/C语言常用宏/","link":"","permalink":"https://humancloud.github.io/2020/10/04/C%E8%AF%AD%E8%A8%80%E5%B8%B8%E7%94%A8%E5%AE%8F/","excerpt":"前言C语言宏功能强大,但一不小心就会用错,许多经典书籍都曾讲过C语言宏的强大功能,此篇文章是参考C陷阱与缺陷书籍和网上其他文章总结的","text":"前言C语言宏功能强大,但一不小心就会用错,许多经典书籍都曾讲过C语言宏的强大功能,此篇文章是参考C陷阱与缺陷书籍和网上其他文章总结的 根据书籍写此篇文章 编程常用宏(常更新)max函数宏 12345错误版#define max(a,b) ((a)&gt;(b))?(a):(b)a或b会被计算两次,如果每次计算a或b都改变,那么最后得到的结果与预想中的会不同 123456789Linux Kernel 版#define max(x,y) (&#123; \\ typeof(x) _max1 = (x); \\ typeof(y) _max2 = (y); \\ (void)(&amp;_max1 == &amp;_max2); \\ _max1 &gt; _max2 ? _max1:_max2;&#125;)x或y只会被计算一次 assert宏 , swap宏","categories":[{"name":"C语言","slug":"C语言","permalink":"https://humancloud.github.io/categories/C%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"https://humancloud.github.io/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"pip更换国内源","slug":"pip","date":"2020-03-09T04:33:07.000Z","updated":"2020-11-18T08:52:43.347Z","comments":true,"path":"2020/03/09/pip/","link":"","permalink":"https://humancloud.github.io/2020/03/09/pip/","excerpt":"pip更换国内源可加快下载速度","text":"pip更换国内源可加快下载速度 步骤 12345678mkdir ~/.pipvim ~/.pip/pip.conf打开文件后,输入以下信息,即可使用清华源[global]index-url = https://pypi.tuna.tsinghua.edu.cn/simple[install]trusted-host = https://pypi.tuna.tsinghua.edu.cn 使用easy_install来安装模块 1234567easy_install 换源cd /root 注意要放到/root目录下vi .pydistutils.cfg 打开配置文件[easy_install]index-url=http://mirrors.aliyun.com/pypi/simple/find-links=http://mirrors.aliyun.com/pypi/simple/","categories":[],"tags":[]}],"categories":[{"name":"IOCCC","slug":"IOCCC","permalink":"https://humancloud.github.io/categories/IOCCC/"},{"name":"C语言","slug":"C语言","permalink":"https://humancloud.github.io/categories/C%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"https://humancloud.github.io/tags/%E7%AC%94%E8%AE%B0/"}]}