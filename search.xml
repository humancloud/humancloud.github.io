<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C语言宏实现max</title>
    <url>/2020/10/04/C%E8%AF%AD%E8%A8%80%E5%AE%8F%E5%AE%9E%E7%8E%B0max/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>C语言宏功能强大,但一不小心就会用错,许多经典书籍都曾讲过C语言宏的强大功能,此篇文章是参考C陷阱与缺陷书籍和网上其他文章总结的</p>
<a id="more"></a>





<p>根据书籍写此篇文章</p>
<h2 id="编程常用宏-常更新"><a href="#编程常用宏-常更新" class="headerlink" title="编程常用宏(常更新)"></a>编程常用宏(常更新)</h2><p><strong>max函数宏</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">错误版</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(a,b) ((a)&gt;(b))?(a):(b)</span></span><br><span class="line"></span><br><span class="line">a或b会被计算两次,如果每次计算a或b都改变,那么最后得到的结果与预想中的会不同</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Linux Kernel 版</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) (&#123;                \</span></span><br><span class="line">		typeof(x) _max1 = (x);     \</span><br><span class="line">		typeof(y) _max2 = (y);     \</span><br><span class="line">		(<span class="keyword">void</span>)(&amp;_max1 == &amp;_max2);  \</span><br><span class="line">		_max1 &gt; _max2 ? _max1:_max2;&#125;)</span><br><span class="line"></span><br><span class="line">x或y只会被计算一次</span><br></pre></td></tr></table></figure>




<p>assert宏   ,   swap宏</p>
]]></content>
      <categories>
        <category>C语言</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Git基础总结</title>
    <url>/2020/11/03/Git%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Git基础使用: 基础命令(修改,远程操作),分支合并,解决冲突,标签</p>
<a id="more"></a>


<h1 id="1-基础操作"><a href="#1-基础操作" class="headerlink" title="1.基础操作"></a>1.基础操作</h1><p><img src="/2020/11/03/Git%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/git.jpg" alt="git"></p>
<p><img src="/2020/11/03/Git%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/git1.jpg" alt="git1"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">工作区: 电脑里能看到的目录</span><br><span class="line">暂存区: 英文为stage或index,一般存放在.git目录下的index文件(.git&#x2F;index)中,所以我们把暂存区有时也叫作索引index</span><br><span class="line">版本库(仓库区): 工作区有一个隐藏目录.git,这个不算工作区,而是Git的版本库</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">图中左侧为工作区，右侧为版本库。在版本库中标记为 &quot;index&quot; 的区域是暂存区（stage&#x2F;index），标记为 &quot;master&quot; 的是 master 分支所代表的目录树。</span><br><span class="line"></span><br><span class="line">图中我们可以看出此时 &quot;HEAD&quot; 实际是指向 master 分支的一个&quot;游标&quot;。所以图示的命令中出现 HEAD 的地方可以用 master 来替换。</span><br><span class="line"></span><br><span class="line">图中的 objects 标识的区域为 Git 的对象库，实际位于 &quot;.git&#x2F;objects&quot; 目录下，里面包含了创建的各种对象及内容。</span><br><span class="line"></span><br><span class="line">当对工作区修改（或新增）的文件执行 git add 命令时，暂存区的目录树被更新，同时工作区修改（或新增）的文件内容被写入到对象库中的一个新的对象中，而该对象的ID被记录在暂存区的文件索引中。</span><br><span class="line"></span><br><span class="line">当执行提交操作（git commit）时，暂存区的目录树写到版本库（对象库）中，master 分支会做相应的更新。即 master 指向的目录树就是提交时暂存区的目录树。</span><br><span class="line"></span><br><span class="line">当执行 git reset HEAD 命令时，暂存区的目录树会被重写，被 master 分支指向的目录树所替换，但是工作区不受影响。</span><br><span class="line"></span><br><span class="line">当执行 git rm --cached &lt;file&gt; 命令时，会直接从暂存区删除文件，工作区则不做出改变。</span><br><span class="line"></span><br><span class="line">当执行 git checkout . 或者 git checkout -- &lt;file&gt; 命令时，会用暂存区全部或指定的文件替换工作区的文件。这个操作很危险，会清除工作区中未添加到暂存区的改动。</span><br><span class="line"></span><br><span class="line">当执行 git checkout HEAD . 或者 git checkout HEAD &lt;file&gt; 命令时，会用 HEAD 指向的 master 分支中的全部或者部分文件替换暂存区和以及工作区中的文件。这个命令也是极具危险性的，因为不但会清除工作区中未提交的改动，也会清除暂存区中未提交的改动。</span><br></pre></td></tr></table></figure>



<h3 id="1-1-最简单使用"><a href="#1-1-最简单使用" class="headerlink" title="1. 1 最简单使用"></a>1. 1 最简单使用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &#39;humancloud&#39;</span><br><span class="line">git config --global user.email &#39;humancloud@126.com&#39;</span><br><span class="line">git init  版本区建立(创建.git文件)</span><br><span class="line">git add . 把工作区所有文件提交到版本区里的暂存区</span><br><span class="line">git commit -m &quot;xxx&quot; 暂存区所以文件提交到仓库区(暂存区空)</span><br><span class="line">git remote add origin xxxxxx.git  把本地仓库与远程仓库连接起来</span><br><span class="line">git push -u origin master 把仓库区文件提交到远程仓库里(将本地的master分支推送到origin主机,同时指定origin为默认主机))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">平常:</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;regular&quot;</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>



<p><strong>最简单操作</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  calculator git:(master) ✗ git add a.c     添加到暂存区</span><br><span class="line">➜  calculator git:(master) ✗ git commit -m &quot;first&quot;	将文件从暂存区提交到仓库</span><br><span class="line">➜  calculator git:(master) ✗ git remote add origin https:&#x2F;&#x2F;github.com&#x2F;humancloud&#x2F;c.git &#x2F;&#x2F;将本地仓库同步到远程仓库</span><br><span class="line">➜  calculator git:(master) ✗ git push -u origin master </span><br><span class="line">Username for &#39;https:&#x2F;&#x2F;github.com&#39;: humancloud</span><br><span class="line">Password for &#39;https:&#x2F;&#x2F;humancloud@github.com&#39;: </span><br><span class="line">对象计数中: 5, 完成.</span><br><span class="line">Delta compression using up to 8 threads.</span><br><span class="line">压缩对象中: 100% (2&#x2F;2), 完成.</span><br><span class="line">写入对象中: 100% (5&#x2F;5), 1.72 KiB | 1.72 MiB&#x2F;s, 完成.</span><br><span class="line">Total 5 (delta 0), reused 0 (delta 0)</span><br><span class="line">To https:&#x2F;&#x2F;github.com&#x2F;humancloud&#x2F;c.git</span><br><span class="line"> * [new branch]      master -&gt; master</span><br><span class="line">分支 &#39;master&#39; 设置为跟踪来自 &#39;origin&#39; 的远程分支 &#39;master&#39;。</span><br><span class="line">➜  calculator git:(master) ✗ </span><br><span class="line">➜  calculator git:(master) ✗ git rm -r .   &#x2F;&#x2F;删除暂存区和工作区(本地的文件哦)的文件</span><br><span class="line">➜  calculator git:(master) ✗ git commit -m &quot;xxx&quot;  &#x2F;&#x2F;提交修改</span><br><span class="line">➜  calculator git:(master) ✗ git push -u origin master  &#x2F;&#x2F;提交修改到远程仓库</span><br><span class="line"></span><br><span class="line">执行此三条后远程仓库和本地所有都被删除,要想不删除本地的,执行这个</span><br><span class="line">➜  calculator git:(master) ✗ git rm --cache .    &#x2F;&#x2F;只会删除暂存区的,不会删除工作区</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Git 常用的是以下 6 个命令：git clone、git push、git add 、git commit、git checkout、git pull</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">➜  calculator git:(master) ✗ git status 查看状态</span><br></pre></td></tr></table></figure>



<h3 id="1-2-创建仓库"><a href="#1-2-创建仓库" class="headerlink" title="1.2 创建仓库"></a>1.2 创建仓库</h3><p>init</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git init 命用于在目录中创建新的 Git 仓库。</span><br></pre></td></tr></table></figure>

<p>clone</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  calculator git:(master) ✗ git clone 拷贝一个远程仓库,将复制该项目的所有记录</span><br></pre></td></tr></table></figure>



<h3 id="1-3-提交与修改"><a href="#1-3-提交与修改" class="headerlink" title="1.3 提交与修改"></a>1.3 提交与修改</h3><p>add</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">添加文件到仓库</span><br><span class="line"></span><br><span class="line">git add [file1] [file2] ...</span><br><span class="line"></span><br><span class="line">git add [dir]</span><br><span class="line"></span><br><span class="line">git add .  添加当前目录所有文件到暂存区</span><br></pre></td></tr></table></figure>

<p>status</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git status 命令用于查看在你上次提交之后是否有对文件进行再次修改。显示有变更的文件</span><br></pre></td></tr></table></figure>



<p>diff</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">比较文件的不同,即暂存区和工作区的差异</span><br><span class="line"></span><br><span class="line">显示暂存区和工作区的差异:</span><br><span class="line">$ git diff [file]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">显示暂存区和上一次提交(commit)的差异:</span><br><span class="line">$ git diff --cached [file]</span><br><span class="line">或</span><br><span class="line">$ git diff --staged [file]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">显示两次提交之间的差异:</span><br><span class="line">$ git diff [first-branch]...[second-branch]</span><br></pre></td></tr></table></figure>

<p>commit</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">提交暂存区到本地仓库</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">git commit -m &quot;有用的信息每次都不一样&quot;</span><br><span class="line"></span><br><span class="line">git commit [file1] [file2] -m &quot;xxxxxx&quot;</span><br></pre></td></tr></table></figure>

<p>reset</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git reset [HEAD]  回溯版本</span><br><span class="line">--mixed 为默认，可以不用带该参数，用于重置暂存区的文件与上一次的提交(commit)保持一致，工作区文件内容保持不变。</span><br><span class="line">--soft 参数用于回退到某个版本：</span><br><span class="line">--hard 参数撤销工作区中所有未提交的修改内容，将暂存区与工作区都回到上一次版本，并删除之前的所有信息提交：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">撤销版本库的修改(暂存区,工作区不变): git reset --soft [HEAD]</span><br><span class="line">撤销版本库和暂存区不修改工作区: git reset --mixed [HEAD]</span><br><span class="line">将工作区,暂存区,版本库恢复到指定的版本:git reset --hard [HEAD]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">HEAD 表示当前版本</span><br><span class="line"></span><br><span class="line">HEAD^ 上一个版本</span><br><span class="line"></span><br><span class="line">HEAD^^ 上上一个版本</span><br><span class="line"></span><br><span class="line">HEAD^^^ 上上上一个版本</span><br><span class="line"></span><br><span class="line">以此类推...</span><br><span class="line"></span><br><span class="line">可以使用 ～数字表示</span><br><span class="line">HEAD~0 表示当前版本</span><br><span class="line"></span><br><span class="line">HEAD~1 上一个版本</span><br><span class="line"></span><br><span class="line">HEAD^2 上上一个版本</span><br><span class="line"></span><br><span class="line">HEAD^3 上上上一个版本</span><br><span class="line"></span><br><span class="line">以此类推...</span><br></pre></td></tr></table></figure>

<p>rm</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、将文件从暂存区和工作区中删除：</span><br><span class="line">git rm &lt;file&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项 -f。</span><br><span class="line">强行从暂存区和工作区中删除修改后的 runoob.txt 文件：</span><br><span class="line">git rm -f runoob.txt </span><br><span class="line"></span><br><span class="line">如果想把文件从暂存区域移除，但仍然希望保留在当前工作目录中，换句话说，仅是从跟踪清单中删除，使用 --cached 选项即可：</span><br><span class="line">git rm --cached &lt;file&gt;</span><br></pre></td></tr></table></figure>



<p>mv</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">git mv 命令用于移动或重命名一个文件、目录或软连接。(操作暂存区)</span><br><span class="line"></span><br><span class="line">git mv [file] [newfile]</span><br><span class="line"></span><br><span class="line">如果新文件名已经存在，但还是要重命名它，可以使用 -f 参数：</span><br><span class="line">git mv -f [file] [newfile]</span><br></pre></td></tr></table></figure>



<p>checkout</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout</span><br><span class="line"></span><br><span class="line">（1）.切换或者新建分支。</span><br><span class="line"></span><br><span class="line">（2）.将暂存区或者指定commit内容覆盖到工作区。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">➜  calculator git:(master) ✗ git checkout --file 用版本区的版本替换工作区的版本</span><br></pre></td></tr></table></figure>





<h3 id="1-2-日志"><a href="#1-2-日志" class="headerlink" title="1.2 日志"></a>1.2 日志</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git log</span><br><span class="line"></span><br><span class="line">这个最上面的是最近的提交,这串数字就是版本库ID</span><br><span class="line"></span><br><span class="line">commit d2c6f0ca1e7c075692c55870f4166b1e297dfcea (HEAD -&gt; master)</span><br><span class="line">Author: humancloud &lt;humancloud@126.com&gt;</span><br><span class="line">Date:   Sat May 2 19:05:43 2020 +0800</span><br><span class="line"></span><br><span class="line">    regular</span><br><span class="line">    </span><br><span class="line">git log --author&#x3D;xxx  查找指定用户的提交日志</span><br><span class="line"></span><br><span class="line">git blame &lt;file&gt; 查看指定文件的修改纪录</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">我们可以用 --oneline 选项来查看历史记录的简洁的版本</span><br><span class="line">还可以用 --graph 选项，查看历史中什么时候出现了分支、合并</span><br><span class="line">也可以用 --reverse 参数来逆向显示所有日志。</span><br></pre></td></tr></table></figure>



<h3 id="1-3-远程操作"><a href="#1-3-远程操作" class="headerlink" title="1.3 远程操作"></a>1.3 远程操作</h3><p>remote</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">remote</span><br><span class="line"></span><br><span class="line">常用的origin是远程仓库的别名[name],可以使用任何名字</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">➜  calculator git:(master) ✗ git remote -v 查看远程仓库</span><br><span class="line">➜  calculator git:(master) ✗ git remote add [name] [url] 添加远程仓库(github和gitee一个本地可以有几个远程仓库)</span><br><span class="line">➜  calculator git:(master) ✗ git remote show https:&#x2F;&#x2F;github.com&#x2F;tian&#x2F;runoob 显示仓库信息</span><br><span class="line">➜  calculator git:(master) ✗ git remote set-url --push [name] [new url] 修改远程仓库 </span><br><span class="line">➜  calculator git:(master) ✗ git remote rm [name] 删除远程仓库</span><br><span class="line">➜  calculator git:(master) ✗ git remote rename oldname newname 修改仓库名</span><br><span class="line">➜  calculator git:(master) ✗ git push -u [name] [branch]  &#x2F;&#x2F;向[name]这个仓库的[branch]分支push</span><br></pre></td></tr></table></figure>

<p>fentch</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git fetch 命令用于从远程获取代码库。该命令执行完后需要执行 git merge 远程分支到你所在的分支。从远端仓库提取数据并尝试合并到当前分支：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">假设你配置好了一个远程仓库，并且你想要提取更新的数据，你可以首先执行:</span><br><span class="line"></span><br><span class="line">git fetch [name]      &#x2F;&#x2F;name是仓库别名,这条命令告诉 Git 去获取它有你没有的数据，</span><br><span class="line"></span><br><span class="line">然后你可以执行</span><br><span class="line">git merge [name] [branch]</span><br><span class="line"></span><br><span class="line">例如 git merge origin master   &#x2F;&#x2F;从origin仓库下载更新合并到我的master分支</span><br><span class="line"></span><br><span class="line">以上命令将服务器上的任何更新（假设有人这时候推送到服务器了）合并到你的当前分支。</span><br></pre></td></tr></table></figure>

<p>pull</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git pull 命用于从远程获取代码并合并本地的版本。</span><br><span class="line"></span><br><span class="line">git pull 其实就是 git fetch 和 git merge FETCH_HEAD 的简写</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">更新操作：</span><br><span class="line">$ git pull  把最新的提交从远程仓库抓取下来,在本地合并,克隆下项目来,如果想要更新项目,直接git pull 把最新的项目拉下来,即可.</span><br><span class="line">$ git pull origin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">将远程主机 origin 的 master 分支拉取过来，与本地的 brantest 分支合并。</span><br><span class="line">$ git pull origin master:brantest</span><br><span class="line"></span><br><span class="line">如果远程分支是与当前分支合并，则冒号后面的部分可以省略。</span><br><span class="line">$ git pull origin master</span><br></pre></td></tr></table></figure>

<p>push</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">git push 命用于从将本地的分支版本上传到远程并合并。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">以下命令将本地的 master 分支推送到 origin 主机的 master 分支。</span><br><span class="line">$ git push origin master</span><br><span class="line">相等于：</span><br><span class="line">$ git push origin master:master</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">如果本地版本与远程版本有差异，但又要强制推送可以使用 --force 参数：</span><br><span class="line">git push --force origin master</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">删除主机分支可以使用 --delete 参数，以下命令表示删除 origin 主机的 master 分支：</span><br><span class="line">git push origin --delete master</span><br></pre></td></tr></table></figure>











<h1 id="2-分支与合并"><a href="#2-分支与合并" class="headerlink" title="2.分支与合并"></a>2.分支与合并</h1><p>创建自己的分支,开发完毕后,再一次性合并到原来的分支上,即安全又不影响别人工作,</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git init 会默认创建master分支</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">➜  calculator git:(master) ✗ git branch other   新建other分支</span><br><span class="line">➜  calculator git:(master) ✗ git checkout other 切换到other分支,当你切换分支的时候，Git 会用该分支的最后提交的快照替换你的工作目录的内容，也就是如果本来master分支下commit的文件,切换分支时git会把master分支commit的文件制作快照,把本地文件切换为other分支里commit的文件.这样你不需要自己创建目录,存放其他分支的文件,注意工作区和暂存区不会这样,如果master有文件没有被commit那么切换分支时此文件也会出现在新的分支里,并且两个分支共享此文件</span><br><span class="line"></span><br><span class="line">所以为了两个分支不影响,应当将本分支所有文件commit后再切换分支</span><br><span class="line"></span><br><span class="line">实例:</span><br><span class="line">[root@ecs-x-medium-2-linux-20200315145740 gittest]# ls</span><br><span class="line">main.c</span><br><span class="line">[root@ecs-x-medium-2-linux-20200315145740 gittest]# git add main.c</span><br><span class="line">[root@ecs-x-medium-2-linux-20200315145740 gittest]# git commit -m &quot;commit main.c on master&quot;</span><br><span class="line">[master 4c7e832] commit main.c on master</span><br><span class="line">1 file changed, 5 insertions(+)</span><br><span class="line">create mode 100644 main.c</span><br><span class="line">[root@ecs-x-medium-2-linux-20200315145740 gittest]# git checkout other</span><br><span class="line">Switched to branch &#39;other&#39;</span><br><span class="line">[root@ecs-x-medium-2-linux-20200315145740 gittest]# ls  #main.c没有出现在other分支里</span><br><span class="line">[root@ecs-x-medium-2-linux-20200315145740 gittest]# vim other.txt</span><br><span class="line">[root@ecs-x-medium-2-linux-20200315145740 gittest]# git add .</span><br><span class="line">[root@ecs-x-medium-2-linux-20200315145740 gittest]# git commit -m &quot;other.txt commit on branch other&quot;</span><br><span class="line">[other a98fc2b] other.txt commit on branch other</span><br><span class="line">1 file changed, 1 insertion(+)</span><br><span class="line">create mode 100644 other.txt</span><br><span class="line">[root@ecs-x-medium-2-linux-20200315145740 gittest]# ls</span><br><span class="line">other.txt</span><br><span class="line">[root@ecs-x-medium-2-linux-20200315145740 gittest]# git checkout master</span><br><span class="line">Switched to branch &#39;master&#39;</span><br><span class="line">[root@ecs-x-medium-2-linux-20200315145740 gittest]# ls  #other.txt没有出现在master分支里</span><br><span class="line">main.c</span><br><span class="line">[root@ecs-x-medium-2-linux-20200315145740 gittest]# vim a.a</span><br><span class="line">[root@ecs-x-medium-2-linux-20200315145740 gittest]# git add a.a</span><br><span class="line">[root@ecs-x-medium-2-linux-20200315145740 gittest]# git checkout other</span><br><span class="line">A       a.a</span><br><span class="line">Switched to branch &#39;other&#39;</span><br><span class="line">[root@ecs-x-medium-2-linux-20200315145740 gittest]# ls     #a.a出现在新分支里</span><br><span class="line">a.a  other.txt</span><br><span class="line">[root@ecs-x-medium-2-linux-20200315145740 gittest]#</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">➜  calculator git:(master) ✗ git add </span><br><span class="line">➜  calculator git:(master) ✗ git commit -m &quot;xxx&quot; &#x2F;&#x2F;在other分支提交</span><br><span class="line">➜  calculator git:(master) ✗ git checkout master 切换回master</span><br><span class="line">➜  calculator git:(master) ✗ git branch 查看分支</span><br><span class="line">➜  calculator git:(master) ✗ </span><br><span class="line">➜  calculator git:(master) ✗ git merge other 合并other分支到当前所在分支</span><br><span class="line">➜  calculator git:(master) ✗ git branch -d other 删除other分支</span><br><span class="line">➜  calculator git:(master) ✗</span><br></pre></td></tr></table></figure>



<p><strong>冲突</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git merge 可能会发生冲突</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1、git merge冲突了，根据提示找到冲突的文件，解决冲突,如果文件有冲突，那么会有类似的标记</span><br><span class="line"></span><br><span class="line">2、修改完之后，执行git add冲突文件名,告诉 Git 文件冲突已经解决</span><br><span class="line"></span><br><span class="line">3、git commit</span><br><span class="line">注意:没有-m选项</span><br><span class="line">进去类似于vim的操作界面，把conflict相关的行删除掉</span><br><span class="line"></span><br><span class="line">4. 这就解决了冲突,并将新的master分支内容commit到仓库区</span><br></pre></td></tr></table></figure>

<p><strong>实例</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">制造冲突:</span><br><span class="line">两个分支commit的文件里有相同文件名的文件即会发生冲突</span><br><span class="line"></span><br><span class="line">[root@ecs-x-medium-2-linux-20200315145740 gittest]# git branch        </span><br><span class="line">* master</span><br><span class="line">other</span><br><span class="line">[root@ecs-x-medium-2-linux-20200315145740 gittest]# ls</span><br><span class="line">confltest.txt  main.c</span><br><span class="line">[root@ecs-x-medium-2-linux-20200315145740 gittest]# cat confltest.txt </span><br><span class="line">this is a test , a file on master</span><br><span class="line">[root@ecs-x-medium-2-linux-20200315145740 gittest]# git add confltest.txt </span><br><span class="line">[root@ecs-x-medium-2-linux-20200315145740 gittest]# git commit -m &quot;this is a commit on master&quot; </span><br><span class="line">[master 8bba54d] this is a commit on master</span><br><span class="line">1 file changed, 1 insertion(+)</span><br><span class="line">create mode 100644 confltest.txt</span><br><span class="line">[root@ecs-x-medium-2-linux-20200315145740 gittest]# git checkout other</span><br><span class="line">Switched to branch &#39;other&#39;</span><br><span class="line">[root@ecs-x-medium-2-linux-20200315145740 gittest]# ls</span><br><span class="line">other.txt</span><br><span class="line">[root@ecs-x-medium-2-linux-20200315145740 gittest]# touch confltest.txt</span><br><span class="line">[root@ecs-x-medium-2-linux-20200315145740 gittest]# vim confltest.txt</span><br><span class="line">[root@ecs-x-medium-2-linux-20200315145740 gittest]# cat confltest.txt</span><br><span class="line">lalala , i am  branch other</span><br><span class="line">[root@ecs-x-medium-2-linux-20200315145740 gittest]# git add confltest.txt</span><br><span class="line">[root@ecs-x-medium-2-linux-20200315145740 gittest]# git commit -m &quot;this is branch other&quot;</span><br><span class="line">[other 0423971] this is branch other</span><br><span class="line">1 file changed, 1 insertion(+)</span><br><span class="line">create mode 100644 confltest.txt</span><br><span class="line">[root@ecs-x-medium-2-linux-20200315145740 gittest]# git checkout master</span><br><span class="line">Switched to branch &#39;master&#39;</span><br><span class="line">[root@ecs-x-medium-2-linux-20200315145740 gittest]# git merge other  #看到发生冲突</span><br><span class="line">Auto-merging confltest.txt</span><br><span class="line">CONFLICT (add&#x2F;add): Merge conflict in confltest.txt</span><br><span class="line">Automatic merge failed; fix conflicts and then commit the result.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">解决冲突</span><br><span class="line"></span><br><span class="line">[root@ecs-x-medium-2-linux-20200315145740 gittest]# ls </span><br><span class="line">confltest.txt  main.c  other.txt</span><br><span class="line"></span><br><span class="line">可以看到合并已经完成了,但是两个文件名相同的文件怎么就剩下一个了那 ?</span><br><span class="line">打开冲突文件(即confltest.txt)</span><br><span class="line">[root@ecs-x-medium-2-linux-20200315145740 gittest]# cat confltest.txt  </span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">this is a test , a file on master</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">lalala , i am  branch other</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; other</span><br><span class="line"></span><br><span class="line">发现里面有格式</span><br><span class="line">冲突文件的格式基本如下</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt;到&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 是在当前分支合并之前的文件内容</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;到&gt;&gt;&gt;&gt;&gt;&gt;&gt; other 是在other分支下该文件的内容</span><br><span class="line"></span><br><span class="line">此时我们需要手动修改此文件,将冲突消除</span><br><span class="line"></span><br><span class="line">[root@ecs-x-medium-2-linux-20200315145740 gittest]# vim confltest.txt #手动修改冲突</span><br><span class="line">[root@ecs-x-medium-2-linux-20200315145740 gittest]# cat confltest.txt #修改之后文件内容</span><br><span class="line">this is a test , a file on master</span><br><span class="line">lalala , i am  branch other</span><br><span class="line"></span><br><span class="line">我手动将两个文件内容放在了一起,将特殊符号删除,此时冲突消失</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">执行下面两条</span><br><span class="line">[root@ecs-x-medium-2-linux-20200315145740 gittest]# git add confltest.txt</span><br><span class="line">[root@ecs-x-medium-2-linux-20200315145740 gittest]# git commit</span><br><span class="line">[master 229dd70] Merge branch &#39;other&#39;</span><br><span class="line">此时进入类似vim的界面,内容如下:</span><br><span class="line">Merge branch &#39;other&#39;</span><br><span class="line"></span><br><span class="line">Conflicts:</span><br><span class="line">confltest.txt</span><br><span class="line">#</span><br><span class="line"># It looks like you may be committing a merge.</span><br><span class="line"># If this is not correct, please remove the file</span><br><span class="line">#       .git&#x2F;MERGE_HEAD</span><br><span class="line"># and try again.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Please enter the commit message for your changes. Lines starting</span><br><span class="line"># with &#39;#&#39; will be ignored, and an empty message aborts the commit.</span><br><span class="line"># On branch master</span><br><span class="line"># All conflicts fixed but you are still merging.</span><br><span class="line">#   (use &quot;git commit&quot; to conclude merge)</span><br><span class="line">#</span><br><span class="line"># Changes to be committed:</span><br><span class="line">#</span><br><span class="line">#       modified:   confltest.txt</span><br><span class="line">#       new file:   other.txt</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">需要删掉下面这两行</span><br><span class="line">Conflicts:</span><br><span class="line">confltest.txt</span><br><span class="line"></span><br><span class="line">然后保存退出,此时合并良好完成,且合并后的master分支里面的文件都已经commit到了仓库区,工作完成,此时可直接push到远程仓库啦</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">验证一下:</span><br><span class="line">可以看到,工作区新添加的文件也commit到了仓库区,就是合并后的新的master分支的内容都到了master的仓库区</span><br><span class="line">[root@ecs-x-medium-2-linux-20200315145740 gittest]# git status</span><br><span class="line"># On branch master</span><br><span class="line">nothing to commit, working directory clean</span><br><span class="line">[root@ecs-x-medium-2-linux-20200315145740 gittest]# git add .</span><br><span class="line">[root@ecs-x-medium-2-linux-20200315145740 gittest]# git commit -m &quot;test&quot;</span><br><span class="line"># On branch master</span><br><span class="line">nothing to commit, working directory clean</span><br><span class="line">[root@ecs-x-medium-2-linux-20200315145740 gittest]# ls</span><br><span class="line">confltest.txt  main.c  other.txt</span><br><span class="line">[root@ecs-x-medium-2-linux-20200315145740 gittest]#</span><br></pre></td></tr></table></figure>

<h1 id="3-标签"><a href="#3-标签" class="headerlink" title="3.标签"></a>3.标签</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果你达到一个重要的阶段，并希望永远记住那个特别的提交快照，你可以使用 git tag 给它打上标签。</span><br><span class="line"></span><br><span class="line">比如说，我们想为我们的 runoob 项目发布一个&quot;1.0&quot;版本。 我们可以用 git tag -a v1.0 命令给最新一次提交打上（HEAD）&quot;v1.0&quot;的标签。</span><br><span class="line"></span><br><span class="line">-a 选项意为&quot;创建一个带注解的标签&quot;。 不用 -a 选项也可以执行的，但它不会记录这标签是啥时候打的，谁打的，也不会让你添加个标签的注解。 我推荐一直创建带注解的标签。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">使用:</span><br><span class="line">当你执行 git tag -a 命令时，Git 会打开你的编辑器，让你写一句标签注解，就像你给提交写注解一样。</span><br><span class="line"></span><br><span class="line">现在，注意当我们执行 git log --decorate 时，我们可以看到我们的标签了</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">如果我们忘了给某个提交打标签，又将它发布了，我们可以给它追加标签。</span><br><span class="line">git tag -a v0.9 85fc7e7</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">查看所有标签使用:  git tag</span><br><span class="line"></span><br><span class="line">指定标签信息命令：  git tag -a &lt;tagname&gt; -m &quot;runoob.com标签&quot;</span><br><span class="line"></span><br><span class="line">PGP签名标签命令：  git tag -s &lt;tagname&gt; -m &quot;runoob.com标签&quot;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>pip更换国内源</title>
    <url>/2020/03/09/pip/</url>
    <content><![CDATA[<p>pip更换国内源可加快下载速度</p>
<p><strong>步骤</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir ~/.pip</span><br><span class="line">vim ~/.pip/pip.conf</span><br><span class="line"></span><br><span class="line">打开文件后,输入以下信息,即可使用清华源</span><br><span class="line">[global]</span><br><span class="line">index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">[install]</span><br><span class="line">trusted-host = https://pypi.tuna.tsinghua.edu.cn</span><br></pre></td></tr></table></figure>

<p><strong>使用easy_install来安装模块</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">easy_install 换源</span><br><span class="line">cd /root          注意要放到/root目录下</span><br><span class="line">vi .pydistutils.cfg 打开配置文件</span><br><span class="line"></span><br><span class="line">[easy_install]</span><br><span class="line">index-url=http://mirrors.aliyun.com/pypi/simple/</span><br><span class="line">find-links=http://mirrors.aliyun.com/pypi/simple/</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
</search>
