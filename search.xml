<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>IOCCC分享</title>
      <link href="/2020/11/18/IOCCC%E5%88%86%E4%BA%AB/"/>
      <url>/2020/11/18/IOCCC%E5%88%86%E4%BA%AB/</url>
      
        <content type="html"><![CDATA[<p><a href="http://www.ioccc.org/" target="_blank" rel="noopener">IOCCC官方网站</a><br><a href="http://www.ioccc.org/years.html" target="_blank" rel="noopener">下载代码</a></p><p>由于下载代码需要上外网,所以我将1984-2019的所有代码,放在了github上.</p><p><a href="https://github.com/humancloud/IOCCC1984-now.git" target="_blank" rel="noopener">代码</a></p><a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> IOCCC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1984IOCCC代码解析</title>
      <link href="/2020/11/18/IOCCC1984-01/"/>
      <url>/2020/11/18/IOCCC1984-01/</url>
      
        <content type="html"><![CDATA[<p>anonymous.c<br>时间: 1984<br>作者: 作者匿名提交了此代码</p><a id="more"></a><p>源代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i;main()&#123;<span class="keyword">for</span>(;i[<span class="string">"]&lt;i;++i)&#123;--i;&#125;"</span>];<span class="built_in">read</span>(<span class="string">'-'</span>-<span class="string">'-'</span>,i+++<span class="string">"hell\</span></span><br><span class="line"><span class="string">o, world!\n"</span>,<span class="string">'/'</span>/<span class="string">'/'</span>));&#125;<span class="built_in">read</span>(j,i,p)&#123;<span class="built_in">write</span>(j/p+p,i---j,i/i);&#125;</span><br></pre></td></tr></table></figure><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><h3 id="初步手动格式化"><a href="#初步手动格式化" class="headerlink" title="初步手动格式化"></a>初步手动格式化</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i;          </span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(;i[<span class="string">"]&lt;i;++i)   //如果编辑器没有高亮,还是不容易看出来这里的格式化不对,其实这里是作者故意迷惑你的</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">--i;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">"</span>];</span><br><span class="line"><span class="built_in">read</span>(<span class="string">'-'</span>-<span class="string">'-'</span>,i+++<span class="string">"hello, world!\n"</span>,<span class="string">'/'</span>/<span class="string">'/'</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">read</span>(j,i,p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">write</span>(j/p+p,i---j,i/i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="更容易理解的格式"><a href="#更容易理解的格式" class="headerlink" title="更容易理解的格式"></a>更容易理解的格式</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STR <span class="meta-string">"]&lt;i;++i)&#123;--i;&#125;"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(;STR[i];<span class="built_in">read</span>(<span class="number">0</span>,<span class="string">"hello,world!\n"</span>+i++,<span class="number">1</span>))    <span class="comment">// '-' - '-' (是两个字符相减)为0,   '/' / '/' (两个字符相除)为1    arr[1] 相当于 1[arr]  运算结果相同</span></span><br><span class="line">;                                          <span class="comment">// 当STR[i] 为0时循环结束即当字符串到结束符时结束循环(一共14次循环)</span></span><br><span class="line">&#125;                                                  <span class="comment">// 字符串字面值是字符串的首地址,"hello,world!\n" + i++    的值就是字符串的第i个字符</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> j,<span class="keyword">int</span> i,<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">write</span>(<span class="number">1</span>,i--,<span class="number">1</span>);      <span class="comment">// i--  i先被使用后自减, 然而每次函数调用i都更新,所以i减不减1都与最后结果无任何关系</span></span><br><span class="line"> <span class="comment">// STDIN_FILENO  0,    STDOUT_FILENO 1,   STDERR_FILENO  2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">循环<span class="number">14</span>次,<span class="string">"hello,world!\n"</span>一个<span class="number">14</span>个字符(字符串末尾有空字符<span class="string">'\0'</span>),每一个字符都使用<span class="built_in">write</span>系统调用输出到标准输出STDOUT_FILENO</span><br><span class="line">程序功能就是输出hello,world!\n</span><br><span class="line"></span><br><span class="line">但是在某些机器上运行,没有结果输出(在我的机器上测试时也没有输出)(原因见下面的疑问与解答)</span><br></pre></td></tr></table></figure><hr><h2 id="疑问与解答"><a href="#疑问与解答" class="headerlink" title="疑问与解答"></a>疑问与解答</h2><ol><li><p>为什么write函数当做系统调用,read不被当做系统调用那?<br> 由于read函数在源文件中有自己的定义所以不会被当做系统调用.</p></li><li><p>为什么没有输出也没有报错那?</p></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">我运行代码发现程序并没有输出我们期望的hello,world!,而是什么也没有输出.</span><br><span class="line"></span><br><span class="line">原因:</span><br><span class="line"></span><br><span class="line"><span class="string">"hello,world!\n"</span> + i++ 得到的是一个指针,这个指针指针指向一个字符,<span class="built_in">write</span>系统调用第二个参数也是一个<span class="keyword">char</span>指针,但是此代码<span class="built_in">read</span>函数过程中将指针转为<span class="keyword">int</span>,<span class="built_in">write</span>函数中再将<span class="keyword">int</span>转回指针,由于<span class="number">64</span>位机器,指针占<span class="number">8</span>字节,整数占<span class="number">4</span>字节,所以数据一定会丢失,指针将不再正确,<span class="built_in">write</span>系统调用会失败,而程序并没有检查<span class="built_in">write</span>系统调用是否正确执行,所以看起来没有报错.</span><br><span class="line"></span><br><span class="line">加上错误处理:</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(; i[<span class="string">"]&lt;i;++i)&#123;--i;&#125;"</span>]; <span class="built_in">read</span>(<span class="string">'-'</span>-<span class="string">'-'</span>,i+++<span class="string">"hello, world!\n"</span>,<span class="string">'/'</span>/<span class="string">'/'</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">read</span>(j,i,p) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> n = <span class="built_in">write</span>(j/p+p,i---j,i/i);</span><br><span class="line"><span class="keyword">if</span>(<span class="number">-1</span> == n)&#123;</span><br><span class="line">perror(<span class="string">"write"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">输出:</span><br><span class="line">➜  anonymous git:(master) ./mytest</span><br><span class="line"><span class="built_in">write</span>: Bad address</span><br><span class="line"><span class="built_in">write</span>: Bad address</span><br><span class="line"><span class="built_in">write</span>: Bad address</span><br><span class="line"><span class="built_in">write</span>: Bad address</span><br><span class="line"><span class="built_in">write</span>: Bad address</span><br><span class="line"><span class="built_in">write</span>: Bad address</span><br><span class="line"><span class="built_in">write</span>: Bad address</span><br><span class="line"><span class="built_in">write</span>: Bad address</span><br><span class="line"><span class="built_in">write</span>: Bad address</span><br><span class="line"><span class="built_in">write</span>: Bad address</span><br><span class="line"><span class="built_in">write</span>: Bad address</span><br><span class="line"><span class="built_in">write</span>: Bad address</span><br><span class="line"><span class="built_in">write</span>: Bad address</span><br><span class="line"><span class="built_in">write</span>: Bad address</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">如果你的机器是<span class="number">32</span>位的,那么指针和<span class="keyword">int</span>都是四字节,相互转换不会有问题</span><br></pre></td></tr></table></figure><ol start="3"><li>下面使用gdb调试继续分析上个问题<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">使用此代码:</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="number">2</span> <span class="keyword">int</span> i;</span><br><span class="line"><span class="number">3</span> main()</span><br><span class="line"><span class="number">4</span> &#123;</span><br><span class="line"><span class="number">5</span>    <span class="keyword">for</span>(; i[<span class="string">"]&lt;i;++i)&#123;--i;&#125;"</span>]; <span class="built_in">read</span>(<span class="string">'-'</span>-<span class="string">'-'</span>,i+++<span class="string">"hello, world!\n"</span>,<span class="string">'/'</span>/<span class="string">'/'</span>));</span><br><span class="line"><span class="number">6</span> &#125;</span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span> <span class="built_in">read</span>(j,i,p) </span><br><span class="line"><span class="number">9</span> &#123;</span><br><span class="line"><span class="number">10</span>    <span class="keyword">int</span> n = <span class="built_in">write</span>(j/p+p,i---j,i/i);</span><br><span class="line"><span class="number">11</span>  <span class="keyword">if</span>(<span class="number">-1</span> == n)&#123;</span><br><span class="line"><span class="number">12</span>  perror(<span class="string">"write"</span>);</span><br><span class="line"><span class="number">13</span>  &#125;</span><br><span class="line"><span class="number">14</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">➜  anonymous git:(master) gcc anonymous.c -o anonymous -g</span><br><span class="line">➜  anonymous git:(master) gdb anonymous</span><br><span class="line">(gdb) b <span class="number">5</span></span><br><span class="line">Breakpoint <span class="number">1</span> at <span class="number">0x114d</span>: file mytest.c, <span class="built_in">line</span> <span class="number">5.</span></span><br><span class="line">(gdb) b <span class="number">10</span></span><br><span class="line">Breakpoint <span class="number">2</span> at <span class="number">0x11b0</span>: file mytest.c, <span class="built_in">line</span> <span class="number">10.</span></span><br><span class="line">(gdb) r</span><br><span class="line">Starting program: /<span class="built_in">home</span>/lu/code/c/IOCCC/<span class="number">1984</span>/anonymous/mytest</span><br><span class="line"></span><br><span class="line">Breakpoint <span class="number">1</span>, main () at mytest.c:<span class="number">5</span></span><br><span class="line"><span class="number">5</span>           <span class="keyword">for</span>(; i[<span class="string">"]&lt;i;++i)&#123;--i;&#125;"</span>]; <span class="built_in">read</span>(<span class="string">'-'</span>-<span class="string">'-'</span>,i+++<span class="string">"hello, world!\n"</span>,<span class="string">'/'</span>/<span class="string">'/'</span>));</span><br><span class="line">(gdb) x/<span class="number">14b</span> <span class="string">"hello, world!\n"</span></span><br><span class="line"><span class="number">0x5555555592a0</span>: <span class="number">104</span>     <span class="number">101</span>     <span class="number">108</span>     <span class="number">108</span>     <span class="number">111</span>     <span class="number">44</span>      <span class="number">32</span>      <span class="number">119</span></span><br><span class="line"><span class="number">0x5555555592a8</span>: <span class="number">111</span>     <span class="number">114</span>     <span class="number">108</span>     <span class="number">100</span>     <span class="number">33</span>      <span class="number">10</span></span><br><span class="line">(gdb) n</span><br><span class="line"></span><br><span class="line">Breakpoint <span class="number">2</span>, <span class="built_in">read</span> (j=<span class="number">0</span>, i=<span class="number">1431658500</span>, p=<span class="number">1</span>) at mytest.c:<span class="number">10</span></span><br><span class="line"><span class="number">10</span>          <span class="keyword">int</span> n = <span class="built_in">write</span>(j/p+p,i---j,i/i);</span><br><span class="line">(gdb) info args</span><br><span class="line">j = <span class="number">0</span></span><br><span class="line">i = <span class="number">1431658500</span></span><br><span class="line">p = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">可以看到字符串首地址为<span class="number">0x5555555592a0</span></span><br><span class="line"><span class="built_in">read</span>函数的第二个参数i的值为<span class="number">1431658500</span>  -&gt; <span class="number">0x55556003</span></span><br><span class="line"></span><br><span class="line">指针的值:  <span class="number">0x55</span> <span class="number">55</span> <span class="number">55</span> <span class="number">55</span> <span class="number">92</span> a0 <span class="number">00</span> <span class="number">00</span></span><br><span class="line"></span><br><span class="line">转为<span class="keyword">int</span>后的值:   <span class="number">0x55</span> <span class="number">55</span> <span class="number">60</span> <span class="number">03</span></span><br><span class="line"></span><br><span class="line">明显看到丢失了数据</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> IOCCC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言常用宏实现</title>
      <link href="/2020/10/04/C%E8%AF%AD%E8%A8%80%E5%B8%B8%E7%94%A8%E5%AE%8F/"/>
      <url>/2020/10/04/C%E8%AF%AD%E8%A8%80%E5%B8%B8%E7%94%A8%E5%AE%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>C语言宏功能强大,但一不小心就会用错,许多经典书籍都曾讲过C语言宏的强大功能,此篇文章是参考C陷阱与缺陷书籍和网上其他文章总结的</p><a id="more"></a><p>根据书籍写此篇文章</p><h2 id="编程常用宏-常更新"><a href="#编程常用宏-常更新" class="headerlink" title="编程常用宏(常更新)"></a>编程常用宏(常更新)</h2><p><strong>max函数宏</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">错误版</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(a,b) ((a)&gt;(b))?(a):(b)</span></span><br><span class="line"></span><br><span class="line">a或b会被计算两次,如果每次计算a或b都改变,那么最后得到的结果与预想中的会不同</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Linux Kernel 版</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) (&#123;                \</span></span><br><span class="line">typeof(x) _max1 = (x);     \</span><br><span class="line">typeof(y) _max2 = (y);     \</span><br><span class="line">(<span class="keyword">void</span>)(&amp;_max1 == &amp;_max2);  \</span><br><span class="line">_max1 &gt; _max2 ? _max1:_max2;&#125;)</span><br><span class="line"></span><br><span class="line">x或y只会被计算一次</span><br></pre></td></tr></table></figure><p>assert宏   ,   swap宏</p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pip更换国内源</title>
      <link href="/2020/03/09/pip/"/>
      <url>/2020/03/09/pip/</url>
      
        <content type="html"><![CDATA[<p>pip更换国内源可加快下载速度</p><a id="more"></a><p><strong>步骤</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/.pip</span><br><span class="line">vim ~/.pip/pip.conf</span><br><span class="line"></span><br><span class="line">打开文件后,输入以下信息,即可使用清华源</span><br><span class="line">[global]</span><br><span class="line">index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">[install]</span><br><span class="line">trusted-host = https://pypi.tuna.tsinghua.edu.cn</span><br></pre></td></tr></table></figure><p><strong>使用easy_install来安装模块</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">easy_install 换源</span><br><span class="line">cd /root          注意要放到/root目录下</span><br><span class="line">vi .pydistutils.cfg 打开配置文件</span><br><span class="line"></span><br><span class="line">[easy_install]</span><br><span class="line">index-url=http://mirrors.aliyun.com/pypi/simple/</span><br><span class="line">find-links=http://mirrors.aliyun.com/pypi/simple/</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
