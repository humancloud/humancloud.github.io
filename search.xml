<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C语言常用宏实现</title>
    <url>/2020/10/04/C%E8%AF%AD%E8%A8%80%E5%B8%B8%E7%94%A8%E5%AE%8F/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>C语言宏功能强大,但一不小心就会用错,许多经典书籍都曾讲过C语言宏的强大功能,此篇文章是参考C陷阱与缺陷书籍和网上其他文章总结的</p>
<a id="more"></a>





<p>根据书籍写此篇文章</p>
<h2 id="编程常用宏-常更新"><a href="#编程常用宏-常更新" class="headerlink" title="编程常用宏(常更新)"></a>编程常用宏(常更新)</h2><p><strong>max函数宏</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">错误版</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(a,b) ((a)&gt;(b))?(a):(b)</span></span><br><span class="line"></span><br><span class="line">a或b会被计算两次,如果每次计算a或b都改变,那么最后得到的结果与预想中的会不同</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Linux Kernel 版</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) (&#123;                \</span></span><br><span class="line">		typeof(x) _max1 = (x);     \</span><br><span class="line">		typeof(y) _max2 = (y);     \</span><br><span class="line">		(<span class="keyword">void</span>)(&amp;_max1 == &amp;_max2);  \</span><br><span class="line">		_max1 &gt; _max2 ? _max1:_max2;&#125;)</span><br><span class="line"></span><br><span class="line">x或y只会被计算一次</span><br></pre></td></tr></table></figure>




<p>assert宏   ,   swap宏</p>
]]></content>
      <categories>
        <category>C语言</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>1984IOCCC代码解析</title>
    <url>/2020/11/18/IOCCC1984-01/</url>
    <content><![CDATA[<p>anonymous.c<br>时间: 1984<br>作者: 作者匿名提交了此代码</p>
<a id="more"></a>


<p>源代码:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i;main()&#123;<span class="keyword">for</span>(;i[<span class="string">"]&lt;i;++i)&#123;--i;&#125;"</span>];<span class="built_in">read</span>(<span class="string">'-'</span>-<span class="string">'-'</span>,i+++<span class="string">"hell\</span></span><br><span class="line"><span class="string">o, world!\n"</span>,<span class="string">'/'</span>/<span class="string">'/'</span>));&#125;<span class="built_in">read</span>(j,i,p)&#123;<span class="built_in">write</span>(j/p+p,i---j,i/i);&#125;</span><br></pre></td></tr></table></figure>



<h2 id="1-解析"><a href="#1-解析" class="headerlink" title="1. 解析"></a>1. 解析</h2><h3 id="1-1-初步手动格式化"><a href="#1-1-初步手动格式化" class="headerlink" title="1.1 初步手动格式化"></a>1.1 初步手动格式化</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i;          </span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">for</span>(;i[<span class="string">"]&lt;i;++i)   //如果编辑器没有高亮,还是不容易看出来这里的格式化不对,其实这里是作者故意迷惑你的</span></span><br><span class="line"><span class="string">	&#123;</span></span><br><span class="line"><span class="string">		--i;</span></span><br><span class="line"><span class="string">	&#125;</span></span><br><span class="line"><span class="string">	"</span>];</span><br><span class="line">	<span class="built_in">read</span>(<span class="string">'-'</span>-<span class="string">'-'</span>,i+++<span class="string">"hello, world!\n"</span>,<span class="string">'/'</span>/<span class="string">'/'</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">read</span>(j,i,p)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">write</span>(j/p+p,i---j,i/i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="1-2-更容易理解的格式"><a href="#1-2-更容易理解的格式" class="headerlink" title="1.2 更容易理解的格式"></a>1.2 更容易理解的格式</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STR <span class="meta-string">"]&lt;i;++i)&#123;--i;&#125;"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(;STR[i];<span class="built_in">read</span>(<span class="number">0</span>,<span class="string">"hello,world!\n"</span>+i++,<span class="number">1</span>))    <span class="comment">// '-' - '-' (是两个字符相减)为0,   '/' / '/' (两个字符相除)为1    arr[1] 相当于 1[arr]  运算结果相同</span></span><br><span class="line">		;                                          <span class="comment">// 当STR[i] 为0时循环结束即当字符串到结束符时结束循环(一共14次循环)</span></span><br><span class="line">&#125;                                                  <span class="comment">// 字符串字面值是字符串的首地址,"hello,world!\n" + i++    的值就是字符串的第i个字符</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> j,<span class="keyword">int</span> i,<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">write</span>(<span class="number">1</span>,i--,<span class="number">1</span>);      <span class="comment">// i--  i先被使用后自减, 然而每次函数调用i都更新,所以i减不减1都与最后结果无任何关系</span></span><br><span class="line">						 <span class="comment">// STDIN_FILENO  0,    STDOUT_FILENO 1,   STDERR_FILENO  2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">循环<span class="number">14</span>次,<span class="string">"hello,world!\n"</span>一个<span class="number">14</span>个字符(字符串末尾有空字符<span class="string">'\0'</span>),每一个字符都使用<span class="built_in">write</span>系统调用输出到标准输出STDOUT_FILENO</span><br><span class="line">程序功能就是输出hello,world!\n</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">但是在某些机器上运行,没有结果输出(在我的机器上测试时也没有输出)(原因见下面的疑问与解答)</span><br><span class="line"></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">----</span><br><span class="line"></span><br><span class="line">## <span class="number">2.</span> 疑问与解答</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 为什么<span class="built_in">write</span>函数当做系统调用,<span class="built_in">read</span>不被当做系统调用那?</span><br></pre></td></tr></table></figure>
<pre><code>由于read函数在源文件中有自己的定义所以不会被当做系统调用.</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">2. 为什么没有输出也没有报错那?</span><br></pre></td></tr></table></figure>
<p>我运行代码发现程序并没有输出我们期望的hello,world!,而是什么也没有输出.</p>
<p>原因:</p>
<p>“hello,world!\n” + i++ 得到的是一个指针,这个指针指针指向一个字符,write系统调用第二个参数也是一个char指针,但是此代码read函数过程中将指针转为int,write函数中再将int转回指针,由于64位机器,指针占8字节,整数占4字节,所以数据一定会丢失,指针将不再正确,write系统调用会失败,而程序并没有检查write系统调用是否正确执行,所以看起来没有报错.</p>
<p>加上错误处理:</p>
<p>#include &lt;stdio.h&gt;</p>
<p>int i;<br>main()<br>{<br>    for(; i[“]&lt;i;++i){–i;}”]; read(‘-‘-‘-‘,i+++”hello, world!\n”,’/‘/‘/‘));<br>}</p>
<p>read(j,i,p)<br>{<br>    int n = write(j/p+p,i—j,i/i);<br>    if(-1 == n){<br>        perror(“write”);<br>    }<br>}</p>
<p>输出:<br>➜  anonymous git:(master) ./mytest<br>write: Bad address<br>write: Bad address<br>write: Bad address<br>write: Bad address<br>write: Bad address<br>write: Bad address<br>write: Bad address<br>write: Bad address<br>write: Bad address<br>write: Bad address<br>write: Bad address<br>write: Bad address<br>write: Bad address<br>write: Bad address</p>
<p>如果你的机器是32位的,那么指针和int都是四字节,相互转换不会有问题</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">3. 下面使用gdb调试继续分析上个问题</span><br><span class="line">&#96;&#96;&#96;c</span><br><span class="line">使用此代码:</span><br><span class="line"></span><br><span class="line">1 #include &lt;stdio.h&gt;</span><br><span class="line">2 int i;</span><br><span class="line">3 main()</span><br><span class="line">4 &#123;</span><br><span class="line">5 	   for(; i[&quot;]&lt;i;++i)&#123;--i;&#125;&quot;]; read(&#39;-&#39;-&#39;-&#39;,i+++&quot;hello, world!\n&quot;,&#39;&#x2F;&#39;&#x2F;&#39;&#x2F;&#39;));</span><br><span class="line">6 &#125;</span><br><span class="line">7</span><br><span class="line">8 read(j,i,p) </span><br><span class="line">9 &#123;</span><br><span class="line">10    int n &#x3D; write(j&#x2F;p+p,i---j,i&#x2F;i);</span><br><span class="line">11	  if(-1 &#x3D;&#x3D; n)&#123;</span><br><span class="line">12		  perror(&quot;write&quot;);</span><br><span class="line">13	  &#125;</span><br><span class="line">14&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">➜  anonymous git:(master) gcc anonymous.c -o anonymous -g</span><br><span class="line">➜  anonymous git:(master) gdb anonymous</span><br><span class="line">(gdb) b 5</span><br><span class="line">Breakpoint 1 at 0x114d: file mytest.c, line 5.</span><br><span class="line">(gdb) b 10</span><br><span class="line">Breakpoint 2 at 0x11b0: file mytest.c, line 10.</span><br><span class="line">(gdb) r</span><br><span class="line">Starting program: &#x2F;home&#x2F;lu&#x2F;code&#x2F;c&#x2F;IOCCC&#x2F;1984&#x2F;anonymous&#x2F;mytest</span><br><span class="line"></span><br><span class="line">Breakpoint 1, main () at mytest.c:5</span><br><span class="line">5           for(; i[&quot;]&lt;i;++i)&#123;--i;&#125;&quot;]; read(&#39;-&#39;-&#39;-&#39;,i+++&quot;hello, world!\n&quot;,&#39;&#x2F;&#39;&#x2F;&#39;&#x2F;&#39;));</span><br><span class="line">(gdb) x&#x2F;14b &quot;hello, world!\n&quot;</span><br><span class="line">0x5555555592a0: 104     101     108     108     111     44      32      119</span><br><span class="line">0x5555555592a8: 111     114     108     100     33      10</span><br><span class="line">(gdb) n</span><br><span class="line"></span><br><span class="line">Breakpoint 2, read (j&#x3D;0, i&#x3D;1431658500, p&#x3D;1) at mytest.c:10</span><br><span class="line">10          int n &#x3D; write(j&#x2F;p+p,i---j,i&#x2F;i);</span><br><span class="line">(gdb) info args</span><br><span class="line">j &#x3D; 0</span><br><span class="line">i &#x3D; 1431658500</span><br><span class="line">p &#x3D; 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">可以看到字符串首地址为0x5555555592a0</span><br><span class="line">read函数的第二个参数i的值为1431658500  -&gt; 0x55556003</span><br><span class="line"></span><br><span class="line">指针的值:  0x55 55 55 55 92 a0 00 00</span><br><span class="line"></span><br><span class="line">转为int后的值:   0x55 55 60 03</span><br><span class="line"></span><br><span class="line">明显看到丢失了数据</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>IOCCC</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>pip更换国内源</title>
    <url>/2020/03/09/pip/</url>
    <content><![CDATA[<p>pip更换国内源可加快下载速度</p>
<a id="more"></a>

<p><strong>步骤</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir ~/.pip</span><br><span class="line">vim ~/.pip/pip.conf</span><br><span class="line"></span><br><span class="line">打开文件后,输入以下信息,即可使用清华源</span><br><span class="line">[global]</span><br><span class="line">index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">[install]</span><br><span class="line">trusted-host = https://pypi.tuna.tsinghua.edu.cn</span><br></pre></td></tr></table></figure>

<p><strong>使用easy_install来安装模块</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">easy_install 换源</span><br><span class="line">cd /root          注意要放到/root目录下</span><br><span class="line">vi .pydistutils.cfg 打开配置文件</span><br><span class="line"></span><br><span class="line">[easy_install]</span><br><span class="line">index-url=http://mirrors.aliyun.com/pypi/simple/</span><br><span class="line">find-links=http://mirrors.aliyun.com/pypi/simple/</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
</search>
