<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>IOCCC1984-02</title>
    <url>/2020/11/20/IOCCC1984-02/</url>
    <content><![CDATA[<p>作者： Sjoerd Mullender  and   Robbert van Renesse<br>源文件： mullender.c</p>
<a id="more"></a>



<h2 id="源文件"><a href="#源文件" class="headerlink" title="源文件"></a>源文件</h2><p>mullender.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">short main[] = &#123;</span><br><span class="line">	<span class="number">277</span>, <span class="number">04735</span>, <span class="number">-4129</span>, <span class="number">25</span>, <span class="number">0</span>, <span class="number">477</span>, <span class="number">1019</span>, <span class="number">0xbef</span>, <span class="number">0</span>, <span class="number">12800</span>,</span><br><span class="line">	<span class="number">-113</span>, <span class="number">21119</span>, <span class="number">0x52d7</span>, <span class="number">-1006</span>, <span class="number">-7151</span>, <span class="number">0</span>, <span class="number">0x4bc</span>, <span class="number">020004</span>,</span><br><span class="line">	<span class="number">14880</span>, <span class="number">10541</span>, <span class="number">2056</span>, <span class="number">04010</span>, <span class="number">4548</span>, <span class="number">3044</span>, <span class="number">-6716</span>, <span class="number">0x9</span>,</span><br><span class="line">	<span class="number">4407</span>, <span class="number">6</span>, <span class="number">5568</span>, <span class="number">1</span>, <span class="number">-30460</span>, <span class="number">0</span>, <span class="number">0x9</span>, <span class="number">5570</span>, <span class="number">512</span>, <span class="number">-30419</span>,</span><br><span class="line">	<span class="number">0x7e82</span>, <span class="number">0760</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">02400</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">1280</span>, <span class="number">4</span>, <span class="number">0</span>,</span><br><span class="line">	<span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0x8</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="string">','</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="string">'#'</span>,</span><br><span class="line">	<span class="number">0</span>, <span class="number">020</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">30</span>, <span class="number">0</span>, <span class="number">026</span>, <span class="number">0</span>, <span class="number">0x6176</span>, <span class="number">120</span>, <span class="number">25712</span>,</span><br><span class="line">	<span class="string">'p'</span>, <span class="number">072163</span>, <span class="string">'r'</span>, <span class="number">29303</span>, <span class="number">29801</span>, <span class="string">'e'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h2 id="源文件目录下的hint-text部分内容"><a href="#源文件目录下的hint-text部分内容" class="headerlink" title="源文件目录下的hint.text部分内容"></a>源文件目录下的hint.text部分内容</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; NOTE: If your machine is not a Vax-11 or pdp-11, this program will</span><br><span class="line">&gt; not execute correctly.  In later years, machine dependent</span><br><span class="line">&gt; code was discouraged.</span><br><span class="line"></span><br><span class="line">The C startup routine (via crt0.o) transfers control to a location</span><br><span class="line">named main.  In this case, main just happens to be in the data area.</span><br><span class="line">The array of shorts, which has been further obfuscated by use of</span><br><span class="line">different data types, just happens to form a meaningful set of PDP-11</span><br><span class="line">and Vax instructions.  The first word is a PDP-11 branch instruction</span><br><span class="line">that branches to the rest of the PDP code.  On the Vax main is called with</span><br><span class="line">the calls instruction which uses the first word of the subroutine as a</span><br><span class="line">mask of registers to be saved.  So on the Vax the first word can be anything.</span><br><span class="line">The real Vax code starts with the second word.  This small program</span><br><span class="line">makes direct calls to the write() Unix system call to produce a</span><br><span class="line">message on the screen.  Can you guess what is printed?  We knew you</span><br><span class="line">couldn&#39;t!  :-)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">翻译:</span><br><span class="line">&gt;注意：如果您的机器不是Vax-11或pdp-11，此程序将</span><br><span class="line">&gt;执行不正确。在未来,代码是依赖机器的</span><br><span class="line">&gt;这样的代码是不被鼓励的。</span><br><span class="line"></span><br><span class="line">C启动程序（通过crt0.o）将控制权转移到一个位置命名为main。</span><br><span class="line">在本例中，main正好在数据区域中。</span><br><span class="line">进一步使用了shorts的数组不同的数据类型，恰好形成了一组有意义的PDP-11和Vax指令。</span><br><span class="line"></span><br><span class="line">第一个字是PDP-11分支指令这将分支到PDP代码的其余部分。</span><br><span class="line">在Vax主管道上使用子例程的第一个字作为要保存的寄存器掩码。</span><br><span class="line">所以在Vax上第一个词可以是任何东西。</span><br><span class="line">真正的Vax代码从第二个单词开始。</span><br><span class="line">这个小程序直接调用write（）Unix系统调用以生成</span><br><span class="line">屏幕上的消息。你能猜出打印的是什么吗？我们知道你不能！:-)</span><br></pre></td></tr></table></figure>



<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>写一个测试程序,只有一个主函数<br><strong>test.c</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对比两个文件的反汇编</p>
<p><img src="/2020/11/20/IOCCC1984-02/1.png" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">test.s里面main标号表示main函数,也标志着程序开始执行的地方(由于内存中数据和指令是放在一起的,main标号的作用就是标志着main标号下面的数据都被当做指令处理,不被当做数据处理)</span><br><span class="line"></span><br><span class="line">而mullender.s里面也有main标号,这个main标号本来的意思是标志数组main的起始,main下面的数据是main数组的数据,而不是指令,</span><br><span class="line">但是由于main是有特殊意义的,所以最终执行时main标号下面的内存块的数据都被当做指令去执行,</span><br><span class="line">而main下面的数据是什么那, main标号下面是汇编器指令.value,.value将main数组中的元素存储在main标号内存地址下面</span><br><span class="line"></span><br><span class="line">(注意: 汇编程序中以.开头的名称并不是指令的助记符，不会被翻译成机器指令,所以最终可执行程序里main下面的所有数据都被当做机器码去执行)</span><br><span class="line">所以这个程序是可以执行的,而且会执行一些指令,但是要看机器平台了,源程序的目录下有文件说此程序只能运行在pdp-11或Vax-11机器上,其他平台可能会发生错误.</span><br><span class="line"></span><br><span class="line">&gt; NOTE: If your machine is not a Vax-11 or pdp-11, this program will</span><br><span class="line">&gt; not execute correctly.</span><br></pre></td></tr></table></figure>

<h2 id="使用gdb调试器证明main下的数据被当做指令执行"><a href="#使用gdb调试器证明main下的数据被当做指令执行" class="headerlink" title="使用gdb调试器证明main下的数据被当做指令执行"></a>使用gdb调试器证明main下的数据被当做指令执行</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">已知一下机器代码代表的汇编代码</span><br><span class="line"><span class="number">00</span> c0   add    %al,%al</span><br><span class="line"><span class="number">08</span> c4   <span class="keyword">or</span>     %al,%ah</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">编写一个简单的c程序如下</span><br><span class="line">short main[] = &#123;<span class="number">0xc000</span>,<span class="number">0xc408</span>&#125;;</span><br><span class="line"></span><br><span class="line">然后使用gdb反汇编得到结果如下</span><br><span class="line">(gdb) disassemble main</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> function main:</span><br><span class="line"><span class="number">0x0000000000004028</span> &lt;+<span class="number">0</span>&gt;:     add    %al,%al</span><br><span class="line"><span class="number">0x000000000000402a</span> &lt;+<span class="number">2</span>&gt;:     <span class="keyword">or</span>     %al,%ah</span><br><span class="line">End of assembler dump.</span><br><span class="line">(gdb)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">直接调试源文件查看汇编,也是一样,只是这里用了一个较小的文件,比较好看.</span><br></pre></td></tr></table></figure>

<h2 id="在pdp11模拟器上运行"><a href="#在pdp11模拟器上运行" class="headerlink" title="在pdp11模拟器上运行"></a>在pdp11模拟器上运行</h2><ul>
<li>使用pdp11模拟器,搭建unix v6系统运行程序但是编译错误,说声明语法有错误,查看了一下unix上的一些c文件,发现原来以前数组是这样初始化的</li>
</ul>
<p><img src="/2020/11/20/IOCCC1984-02/2.png" alt></p>
<ul>
<li><p>修改程序后还是编译错误,原来是unix v6不支持0x开头的十六进制数字,而且也没有short数据类型。。。。</p>
</li>
<li><p>重新使用模拟器搭建unix v7系统运行程序,终于可以运行了。。</p>
</li>
</ul>
<p><strong>运行结果</strong><br><img src="/2020/11/20/IOCCC1984-02/unixcode.gif" alt></p>
<p>Linux下制作动态图ffmpeg -i xxx.mp4 xxx.gif</p>
<h2 id="程序原理"><a href="#程序原理" class="headerlink" title="程序原理"></a>程序原理</h2><p>使用adb调试程序</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> adb a.out</span></span><br><span class="line">:s</span><br><span class="line">stopped at      start:          setd</span><br><span class="line">:s</span><br><span class="line">a.out: running</span><br><span class="line">stopped at      start+02:       mov     02(sp),r0</span><br><span class="line"><span class="meta">$</span><span class="bash">r</span></span><br><span class="line">ps      0170010</span><br><span class="line">pc      02      start+02</span><br><span class="line">sp      0177720</span><br><span class="line">r5      0</span><br><span class="line">r4      0</span><br><span class="line">r3      0</span><br><span class="line">r2      0</span><br><span class="line">r1      06</span><br><span class="line">r0      012</span><br><span class="line">start+02:       mov     02(sp),r0</span><br><span class="line">:s</span><br><span class="line">a.out: running</span><br><span class="line">stopped at      start+06:       clr     0177776(r0)</span><br><span class="line">:s</span><br><span class="line">a.out: running</span><br><span class="line">stopped at      start+012:      mov     sp,r0</span><br><span class="line">:s</span><br><span class="line">a.out: running</span><br><span class="line">stopped at      start+014:      sub     $04,sp</span><br><span class="line">:s</span><br><span class="line">a.out: running</span><br><span class="line">stopped at      start+020:      mov     04(sp),(sp)</span><br><span class="line">:s</span><br><span class="line">a.out: running</span><br><span class="line">stopped at      start+024:      tst     (r0)+</span><br><span class="line">:s</span><br><span class="line">a.out: running</span><br><span class="line">stopped at      start+026:      mov     r0,02(sp)</span><br><span class="line">:s</span><br><span class="line">a.out: running</span><br><span class="line">stopped at      start+032:      tst     (r0)+</span><br><span class="line">:s</span><br><span class="line">a.out: running</span><br><span class="line">stopped at      start+034:      bne     start+032</span><br><span class="line">:s</span><br><span class="line">a.out: running</span><br><span class="line">stopped at      start+032:      tst     (r0)+</span><br><span class="line">:s</span><br><span class="line">a.out: running</span><br><span class="line">stopped at      start+034:      bne     start+032</span><br><span class="line">:s</span><br><span class="line">a.out: running</span><br><span class="line">stopped at      start+036:      cmp     r0,*02(sp)</span><br><span class="line">:s</span><br><span class="line">a.out: running</span><br><span class="line">stopped at      start+042:      bcs     start+046</span><br><span class="line">:s</span><br><span class="line">a.out: running</span><br><span class="line">stopped at      start+046:      mov     r0,04(sp)</span><br><span class="line">:s</span><br><span class="line">a.out: running</span><br><span class="line">stopped at      start+052:      mov     r0,_environ</span><br><span class="line">:s</span><br><span class="line">a.out: running</span><br><span class="line">stopped at      start+056:      jsr     pc,__cleanu+04</span><br><span class="line">:s</span><br><span class="line">a.out: running</span><br><span class="line">stopped at      __cleanu+04:    br      __cleanu+060</span><br><span class="line">:s</span><br><span class="line">a.out: running</span><br><span class="line">stopped at      __cleanu+060:   mov     pc,r4</span><br><span class="line">:s</span><br><span class="line">a.out: running</span><br><span class="line">stopped at      __cleanu+062:   tst     -(r4)</span><br><span class="line">:s</span><br><span class="line">a.out: running</span><br><span class="line">stopped at      __cleanu+064:   sub     $011,r4</span><br><span class="line">:s</span><br><span class="line">a.out: running</span><br><span class="line">stopped at      __cleanu+070:   mov     r4,_main+076</span><br><span class="line">:s</span><br><span class="line">a.out: running</span><br><span class="line">stopped at      __cleanu+074:   mov     $01,r0</span><br><span class="line">:s</span><br><span class="line">a.out: running</span><br><span class="line">stopped at      __cleanu+0100:  sys     write; 0161; 011</span><br><span class="line"><span class="meta">$</span><span class="bash">r</span></span><br><span class="line">ps      0170000</span><br><span class="line">pc      0212    __cleanu+0100</span><br><span class="line">sp      0177712</span><br><span class="line">r5      0</span><br><span class="line">r4      0161    _main+043</span><br><span class="line">r3      0</span><br><span class="line">r2      0</span><br><span class="line">r1      06</span><br><span class="line">r0      01</span><br><span class="line">__cleanu+0100:  sys     write; 0161; 011</span><br><span class="line">:s</span><br><span class="line">a.out: running</span><br><span class="line">stopped at      __cleanu+0112:  sys     tiu</span><br><span class="line">:s</span><br><span class="line">a.out: running</span><br><span class="line">stopped at      __cleanu+0112:  sys     tiu</span><br><span class="line">:s</span><br><span class="line">a.out: running</span><br><span class="line">stopped at      __cleanu+0112:  sys     tiu</span><br><span class="line">:s</span><br><span class="line">a.out: running</span><br><span class="line">stopped at      __cleanu+0112:  sys     tiu</span><br><span class="line">:s</span><br><span class="line">a.out: running</span><br><span class="line">stopped at      __cleanu+0112:  sys     tiu</span><br><span class="line">:s</span><br><span class="line">a.out: running</span><br><span class="line">stopped at      __cleanu+0112:  sys     tiu</span><br><span class="line">:s</span><br><span class="line">a.out: running</span><br><span class="line">stopped at      __cleanu+0112:  sys     tiu</span><br><span class="line">:s</span><br><span class="line">a.out: running</span><br><span class="line">stopped at      __cleanu+0112:  sys     tiu</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">继续执行,后面一直都是</span><br><span class="line">stopped at      __cleanu+0112:  sys     tiu</span><br></pre></td></tr></table></figure>

<p><strong>由于暂时对pdp-11和Vax指令很不了解, 详细过程暂时还是没有搞懂</strong></p>
<p>如果您对pdp-11和Vax指令比较了解,并想了解原理,那么这篇<a href="https://lainsystems.com/posts/exploring-mullender-dot-c/" target="_blank" rel="noopener">博客</a>有可能会帮到你</p>
]]></content>
      <categories>
        <category>IOCCC</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>1984IOCCC代码解析</title>
    <url>/2020/11/18/IOCCC1984-01/</url>
    <content><![CDATA[<p>anonymous.c<br>时间: 1984<br>作者: 作者匿名提交了此代码</p>
<a id="more"></a>


<p>源代码:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i;main()&#123;<span class="keyword">for</span>(;i[<span class="string">"]&lt;i;++i)&#123;--i;&#125;"</span>];<span class="built_in">read</span>(<span class="string">'-'</span>-<span class="string">'-'</span>,i+++<span class="string">"hell\</span></span><br><span class="line"><span class="string">o, world!\n"</span>,<span class="string">'/'</span>/<span class="string">'/'</span>));&#125;<span class="built_in">read</span>(j,i,p)&#123;<span class="built_in">write</span>(j/p+p,i---j,i/i);&#125;</span><br></pre></td></tr></table></figure>



<h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><h3 id="初步手动格式化"><a href="#初步手动格式化" class="headerlink" title="初步手动格式化"></a>初步手动格式化</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i;          </span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">for</span>(;i[<span class="string">"]&lt;i;++i)   //如果编辑器没有高亮,还是不容易看出来这里的格式化不对,其实这里是作者故意迷惑你的</span></span><br><span class="line"><span class="string">	&#123;</span></span><br><span class="line"><span class="string">		--i;</span></span><br><span class="line"><span class="string">	&#125;</span></span><br><span class="line"><span class="string">	"</span>];</span><br><span class="line">	<span class="built_in">read</span>(<span class="string">'-'</span>-<span class="string">'-'</span>,i+++<span class="string">"hello, world!\n"</span>,<span class="string">'/'</span>/<span class="string">'/'</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">read</span>(j,i,p)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">write</span>(j/p+p,i---j,i/i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="更容易理解的格式"><a href="#更容易理解的格式" class="headerlink" title="更容易理解的格式"></a>更容易理解的格式</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STR <span class="meta-string">"]&lt;i;++i)&#123;--i;&#125;"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(;STR[i];<span class="built_in">read</span>(<span class="number">0</span>,<span class="string">"hello,world!\n"</span>+i++,<span class="number">1</span>))    <span class="comment">// '-' - '-' (是两个字符相减)为0,   '/' / '/' (两个字符相除)为1    arr[1] 相当于 1[arr]  运算结果相同</span></span><br><span class="line">		;                                          <span class="comment">// 当STR[i] 为0时循环结束即当字符串到结束符时结束循环(一共14次循环)</span></span><br><span class="line">&#125;                                                  <span class="comment">// 字符串字面值是字符串的首地址,"hello,world!\n" + i++    的值就是字符串的第i个字符</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> j,<span class="keyword">int</span> i,<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">write</span>(<span class="number">1</span>,i--,<span class="number">1</span>);      <span class="comment">// i--  i先被使用后自减, 然而每次函数调用i都更新,所以i减不减1都与最后结果无任何关系</span></span><br><span class="line">						 <span class="comment">// STDIN_FILENO  0,    STDOUT_FILENO 1,   STDERR_FILENO  2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">循环<span class="number">14</span>次,<span class="string">"hello,world!\n"</span>一个<span class="number">14</span>个字符(字符串末尾有空字符<span class="string">'\0'</span>),每一个字符都使用<span class="built_in">write</span>系统调用输出到标准输出STDOUT_FILENO</span><br><span class="line">程序功能就是输出hello,world!\n</span><br><span class="line"></span><br><span class="line">但是在某些机器上运行,没有结果输出(在我的机器上测试时也没有输出)(原因见下面的疑问与解答)</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="疑问与解答"><a href="#疑问与解答" class="headerlink" title="疑问与解答"></a>疑问与解答</h2><ol>
<li><p>为什么write函数当做系统调用,read不被当做系统调用那?<br> 由于用户自定义的函数优先,而read函数在源文件中有自己的定义所以不会被当做系统调用.<br> 注意: 如果在当今的C语言中包含了unistd.h头文件,那么里面有read函数的声明,再去自定义read函数会命名冲突,发生错误</p>
</li>
<li><p>为什么没有输出也没有报错那?</p>
</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">我运行代码发现程序并没有输出我们期望的hello,world!,而是什么也没有输出.</span><br><span class="line"></span><br><span class="line">原因:</span><br><span class="line"></span><br><span class="line"><span class="string">"hello,world!\n"</span> + i++ 得到的是一个指针,这个指针指针指向一个字符,<span class="built_in">write</span>系统调用第二个参数也是一个<span class="keyword">char</span>指针,但是此代码<span class="built_in">read</span>函数过程中将指针转为<span class="keyword">int</span>,<span class="built_in">write</span>函数中再将<span class="keyword">int</span>转回指针,由于<span class="number">64</span>位机器,指针占<span class="number">8</span>字节,整数占<span class="number">4</span>字节,所以数据一定会丢失,指针将不再正确,<span class="built_in">write</span>系统调用会失败,而程序并没有检查<span class="built_in">write</span>系统调用是否正确执行,所以看起来没有报错.</span><br><span class="line"></span><br><span class="line">加上错误处理:</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">for</span>(; i[<span class="string">"]&lt;i;++i)&#123;--i;&#125;"</span>]; <span class="built_in">read</span>(<span class="string">'-'</span>-<span class="string">'-'</span>,i+++<span class="string">"hello, world!\n"</span>,<span class="string">'/'</span>/<span class="string">'/'</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">read</span>(j,i,p) </span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">int</span> n = <span class="built_in">write</span>(j/p+p,i---j,i/i);</span><br><span class="line">	<span class="keyword">if</span>(<span class="number">-1</span> == n)&#123;</span><br><span class="line">		perror(<span class="string">"write"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">输出:</span><br><span class="line">➜  anonymous git:(master) ./mytest</span><br><span class="line"><span class="built_in">write</span>: Bad address</span><br><span class="line"><span class="built_in">write</span>: Bad address</span><br><span class="line"><span class="built_in">write</span>: Bad address</span><br><span class="line"><span class="built_in">write</span>: Bad address</span><br><span class="line"><span class="built_in">write</span>: Bad address</span><br><span class="line"><span class="built_in">write</span>: Bad address</span><br><span class="line"><span class="built_in">write</span>: Bad address</span><br><span class="line"><span class="built_in">write</span>: Bad address</span><br><span class="line"><span class="built_in">write</span>: Bad address</span><br><span class="line"><span class="built_in">write</span>: Bad address</span><br><span class="line"><span class="built_in">write</span>: Bad address</span><br><span class="line"><span class="built_in">write</span>: Bad address</span><br><span class="line"><span class="built_in">write</span>: Bad address</span><br><span class="line"><span class="built_in">write</span>: Bad address</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">如果你的机器是<span class="number">32</span>位的,那么指针和<span class="keyword">int</span>都是四字节,相互转换不会有问题</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>下面使用gdb调试继续分析上个问题<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">使用此代码:</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="number">2</span> <span class="keyword">int</span> i;</span><br><span class="line"><span class="number">3</span> main()</span><br><span class="line"><span class="number">4</span> &#123;</span><br><span class="line"><span class="number">5</span> 	   <span class="keyword">for</span>(; i[<span class="string">"]&lt;i;++i)&#123;--i;&#125;"</span>]; <span class="built_in">read</span>(<span class="string">'-'</span>-<span class="string">'-'</span>,i+++<span class="string">"hello, world!\n"</span>,<span class="string">'/'</span>/<span class="string">'/'</span>));</span><br><span class="line"><span class="number">6</span> &#125;</span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span> <span class="built_in">read</span>(j,i,p) </span><br><span class="line"><span class="number">9</span> &#123;</span><br><span class="line"><span class="number">10</span>    <span class="keyword">int</span> n = <span class="built_in">write</span>(j/p+p,i---j,i/i);</span><br><span class="line"><span class="number">11</span>	  <span class="keyword">if</span>(<span class="number">-1</span> == n)&#123;</span><br><span class="line"><span class="number">12</span>		  perror(<span class="string">"write"</span>);</span><br><span class="line"><span class="number">13</span>	  &#125;</span><br><span class="line"><span class="number">14</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">➜  anonymous git:(master) gcc anonymous.c -o anonymous -g</span><br><span class="line">➜  anonymous git:(master) gdb anonymous</span><br><span class="line">(gdb) b <span class="number">5</span></span><br><span class="line">Breakpoint <span class="number">1</span> at <span class="number">0x114d</span>: file mytest.c, <span class="built_in">line</span> <span class="number">5.</span></span><br><span class="line">(gdb) b <span class="number">10</span></span><br><span class="line">Breakpoint <span class="number">2</span> at <span class="number">0x11b0</span>: file mytest.c, <span class="built_in">line</span> <span class="number">10.</span></span><br><span class="line">(gdb) r</span><br><span class="line">Starting program: /<span class="built_in">home</span>/lu/code/c/IOCCC/<span class="number">1984</span>/anonymous/mytest</span><br><span class="line"></span><br><span class="line">Breakpoint <span class="number">1</span>, main () at mytest.c:<span class="number">5</span></span><br><span class="line"><span class="number">5</span>           <span class="keyword">for</span>(; i[<span class="string">"]&lt;i;++i)&#123;--i;&#125;"</span>]; <span class="built_in">read</span>(<span class="string">'-'</span>-<span class="string">'-'</span>,i+++<span class="string">"hello, world!\n"</span>,<span class="string">'/'</span>/<span class="string">'/'</span>));</span><br><span class="line">(gdb) x/<span class="number">14b</span> <span class="string">"hello, world!\n"</span></span><br><span class="line"><span class="number">0x5555555592a0</span>: <span class="number">104</span>     <span class="number">101</span>     <span class="number">108</span>     <span class="number">108</span>     <span class="number">111</span>     <span class="number">44</span>      <span class="number">32</span>      <span class="number">119</span></span><br><span class="line"><span class="number">0x5555555592a8</span>: <span class="number">111</span>     <span class="number">114</span>     <span class="number">108</span>     <span class="number">100</span>     <span class="number">33</span>      <span class="number">10</span></span><br><span class="line">(gdb) n</span><br><span class="line"></span><br><span class="line">Breakpoint <span class="number">2</span>, <span class="built_in">read</span> (j=<span class="number">0</span>, i=<span class="number">1431658500</span>, p=<span class="number">1</span>) at mytest.c:<span class="number">10</span></span><br><span class="line"><span class="number">10</span>          <span class="keyword">int</span> n = <span class="built_in">write</span>(j/p+p,i---j,i/i);</span><br><span class="line">(gdb) info args</span><br><span class="line">j = <span class="number">0</span></span><br><span class="line">i = <span class="number">1431658500</span></span><br><span class="line">p = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">可以看到字符串首地址为<span class="number">0x5555555592a0</span></span><br><span class="line"><span class="built_in">read</span>函数的第二个参数i的值为<span class="number">1431658500</span>  -&gt; <span class="number">0x55556003</span></span><br><span class="line"></span><br><span class="line">指针的值:  <span class="number">0x55</span> <span class="number">55</span> <span class="number">55</span> <span class="number">55</span> <span class="number">92</span> a0 <span class="number">00</span> <span class="number">00</span></span><br><span class="line"></span><br><span class="line">转为<span class="keyword">int</span>后的值:   <span class="number">0x55</span> <span class="number">55</span> <span class="number">60</span> <span class="number">03</span></span><br><span class="line"></span><br><span class="line">明显看到丢失了数据</span><br></pre></td></tr></table></figure>


</li>
</ol>
<h2 id="正确运行"><a href="#正确运行" class="headerlink" title="正确运行"></a>正确运行</h2><ul>
<li>在pdp-11模拟器上的unix v7上面运行代码</li>
</ul>
<p><img src="/2020/11/18/IOCCC1984-01/unixcode2.gif" alt></p>
<ul>
<li>可看到Unix v7上int类型和指针类型都是2字节,相互转换数据不会丢失</li>
</ul>
]]></content>
      <categories>
        <category>IOCCC</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>IOCCC分享</title>
    <url>/2020/11/18/IOCCC%E5%88%86%E4%BA%AB/</url>
    <content><![CDATA[<p><a href="http://www.ioccc.org/" target="_blank" rel="noopener">IOCCC官方网站</a><br><a href="http://www.ioccc.org/years.html" target="_blank" rel="noopener">下载代码</a></p>
<p>由于下载代码需要上外网,所以我将1984-2019的所有代码,放在了github上.</p>
<p><a href="https://github.com/humancloud/IOCCC1984-now.git" target="_blank" rel="noopener">代码</a></p>
<a id="more"></a>
]]></content>
      <categories>
        <category>IOCCC</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>pip更换国内源</title>
    <url>/2020/03/09/pip/</url>
    <content><![CDATA[<p>pip更换国内源可加快下载速度</p>
<a id="more"></a>

<p><strong>步骤</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir ~/.pip</span><br><span class="line">vim ~/.pip/pip.conf</span><br><span class="line"></span><br><span class="line">打开文件后,输入以下信息,即可使用清华源</span><br><span class="line">[global]</span><br><span class="line">index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">[install]</span><br><span class="line">trusted-host = https://pypi.tuna.tsinghua.edu.cn</span><br></pre></td></tr></table></figure>

<p><strong>使用easy_install来安装模块</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">easy_install 换源</span><br><span class="line">cd /root          注意要放到/root目录下</span><br><span class="line">vi .pydistutils.cfg 打开配置文件</span><br><span class="line"></span><br><span class="line">[easy_install]</span><br><span class="line">index-url=http://mirrors.aliyun.com/pypi/simple/</span><br><span class="line">find-links=http://mirrors.aliyun.com/pypi/simple/</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>编译修改并测试Golang源码</title>
    <url>/2021/01/05/%E7%BC%96%E8%AF%91%E6%B5%8B%E8%AF%95Gola%E6%BA%90%E7%A0%81/</url>
    <content><![CDATA[<h1 id="编译修改并测试Golang源码"><a href="#编译修改并测试Golang源码" class="headerlink" title="编译修改并测试Golang源码"></a>编译修改并测试Golang源码</h1><p>环境:<br>操作系统:  5.4.80-2-MANJARO<br>本机Golang: go1.15.5<br>要编译的Golang : go1.15.6</p>
<a id="more"></a>



<h2 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h2><ol>
<li>官网下载源码包</li>
<li>解压下载的源码包到我的<del>/code目录，解压后进入</del>/code/go/src  直接执行./all.bash, 下面为命令输出</li>
</ol>
<p>注意: 编译需要你的电脑已经安装了Golang,并且不能设置GOROOT</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">➜  code git:(master) echo $GOROOT     </span><br><span class="line"> # 注意由于编译后会存在两个版本的Golang，所以不要设置GOROOT，如果设置了请删除，其实官方不推荐设置GOROOT，因为安装Golang时程序会自动检测，</span><br><span class="line"> 不管是包管理器安装编译好的二进制形式的Golang，还是下载源码自己安装，都会自动检测安装目录作为GOROOT，如果要多版本共存，那么就不能手动设置GOROOT，否则两个版本只有一个GOROOT，会出问题，</span><br><span class="line"> 如果设置了GOROOT，在我的机器上，安装后两个版本的GOROOT都是/usr/lib/go,然后编译测试代码时会提示编译器1.15.5与工具版本1.15.6不合适(本机go为go1.15.5  源码安装的那个为go1.15.6), </span><br><span class="line"> 也就是我运行go1.15.6编译出来的go二进制文件，其实运行的是GOROOT指定的那个即1.15.5版本的那个，</span><br><span class="line"> 所以删除GOROOT，将GOROOT设置为空，然后重新编译，然后问题消失，并且GOROOT一个是/usr/lib/go,一个是~/code/go,两个都正确。</span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  code git:(master) ls</span><br><span class="line">go1.15.6.src.tar.gz</span><br><span class="line">➜  code git:(master) tar -zxvf go1.15.6.src.tar.gz</span><br><span class="line">➜  code git:(master) cd go/src</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 开始编译</span></span><br><span class="line">➜  src git:(master) ./all.bash</span><br><span class="line">Building Go cmd/dist using /usr/lib/go. (go1.15.5 linux/amd64)</span><br><span class="line">Building Go toolchain1 using /usr/lib/go.</span><br><span class="line">Building Go bootstrap cmd/go (go_bootstrap) using Go toolchain1.</span><br><span class="line">Building Go toolchain2 using go_bootstrap and Go toolchain1.</span><br><span class="line">Building Go toolchain3 using go_bootstrap and Go toolchain2.</span><br><span class="line">Building packages and commands for linux/amd64.</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#### Testing packages.</span></span></span><br><span class="line">ok      archive/tar     0.174s</span><br><span class="line">ok      archive/zip     0.171s</span><br><span class="line">ok      bufio   0.245s</span><br><span class="line">ok      bytes   0.565s</span><br><span class="line">ok      compress/bzip2  0.203s</span><br><span class="line">ok      compress/flate  1.672s</span><br><span class="line">ok      compress/gzip   0.139s</span><br><span class="line">ok      compress/lzw    0.041s</span><br><span class="line">ok      compress/zlib   0.113s</span><br><span class="line">ok      container/heap  0.046s</span><br><span class="line">ok      container/list  0.012s</span><br><span class="line">ok      container/ring  0.013s</span><br><span class="line">ok      context 0.035s</span><br><span class="line">ok      crypto  0.018s</span><br><span class="line">ok      crypto/aes      0.093s</span><br><span class="line">ok      crypto/cipher   0.077s</span><br><span class="line">ok      crypto/des      0.044s</span><br><span class="line">ok      crypto/dsa      0.025s</span><br><span class="line">ok      crypto/ecdsa    0.755s</span><br><span class="line">ok      crypto/ed25519  0.218s</span><br><span class="line">ok      crypto/elliptic 0.096s</span><br><span class="line">ok      crypto/hmac     0.045s</span><br><span class="line">ok      crypto/internal/subtle  0.023s</span><br><span class="line">ok      crypto/md5      0.028s</span><br><span class="line"></span><br><span class="line">--------------------------</span><br><span class="line">省略很多输出</span><br><span class="line">--------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#### os/user with tag osusergo</span></span></span><br><span class="line">ok      os/user 0.002s</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#### GOMAXPROCS=2 runtime -cpu=1,2,4 -quick</span></span></span><br><span class="line">ok      runtime 17.545s</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#### cmd/go terminal test</span></span></span><br><span class="line">PASS</span><br><span class="line">ok      cmd/go/testdata/testterminal18153       0.003s</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#### Testing without libgcc.</span></span></span><br><span class="line">ok      crypto/x509     0.907s</span><br><span class="line">ok      net     0.024s</span><br><span class="line">ok      os/user 0.087s</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#### internal linking of -buildmode=pie</span></span></span><br><span class="line">ok      reflect 0.226s</span><br><span class="line">ok      os/user 0.009s</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#### sync -cpu=10</span></span></span><br><span class="line">ok      sync    1.205s</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#### Testing race detector</span></span></span><br><span class="line">ok      runtime/race    13.396s</span><br><span class="line">ok      flag    0.110s</span><br><span class="line">ok      net     0.127s</span><br><span class="line">ok      os      0.124s</span><br><span class="line">ok      os/exec 0.092s</span><br><span class="line">ok      encoding/gob    0.066s</span><br><span class="line">ok      flag    0.118s</span><br><span class="line">ok      os/exec 0.114s</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#### ../misc/cgo/stdio</span></span></span><br><span class="line">PASS</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#### ../misc/cgo/life</span></span></span><br><span class="line">PASS</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#### ../misc/cgo/test</span></span></span><br><span class="line">PASS</span><br><span class="line">ok      misc/cgo/test   7.279s</span><br><span class="line">PASS</span><br><span class="line">ok      misc/cgo/test   7.097s</span><br><span class="line">PASS</span><br><span class="line">ok      misc/cgo/test   7.370s</span><br><span class="line">PASS</span><br><span class="line">ok      misc/cgo/testtls        0.011s</span><br><span class="line">PASS</span><br><span class="line">ok      misc/cgo/testtls        0.017s</span><br><span class="line">PASS</span><br><span class="line">ok      misc/cgo/testtls        0.013s</span><br><span class="line">PASS</span><br><span class="line">ok      misc/cgo/nocgo  0.009s</span><br><span class="line">PASS</span><br><span class="line">ok      misc/cgo/nocgo  0.006s</span><br><span class="line">PASS</span><br><span class="line">ok      misc/cgo/nocgo  0.003s</span><br><span class="line">PASS</span><br><span class="line">ok      misc/cgo/test   7.589s</span><br><span class="line">PASS</span><br><span class="line">ok      misc/cgo/test   9.427s</span><br><span class="line">PASS</span><br><span class="line">ok      misc/cgo/test   8.617s</span><br><span class="line">PASS</span><br><span class="line">ok      misc/cgo/test   8.190s</span><br><span class="line">PASS</span><br><span class="line">ok      misc/cgo/testtls        0.007s</span><br><span class="line">PASS</span><br><span class="line">ok      misc/cgo/nocgo  0.004s</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#### ../misc/cgo/testgodefs</span></span></span><br><span class="line">PASS</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#### ../misc/cgo/testso</span></span></span><br><span class="line">ok      misc/cgo/testso 1.069s</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#### ../misc/cgo/testsovar</span></span></span><br><span class="line">ok      misc/cgo/testsovar      1.141s</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#### ../misc/cgo/testcarchive</span></span></span><br><span class="line">SKIP - short mode and $GO_BUILDER_NAME not set</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#### ../misc/cgo/testcshared</span></span></span><br><span class="line">SKIP - short mode and $GO_BUILDER_NAME not set</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#### ../misc/cgo/testshared</span></span></span><br><span class="line">ok      misc/cgo/testshared     36.556s</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#### ../misc/cgo/testplugin</span></span></span><br><span class="line">ok      misc/cgo/testplugin     0.003s</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#### ../misc/cgo/testasan</span></span></span><br><span class="line">ok      testasan        78ms</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#### ../misc/cgo/testsanitizers</span></span></span><br><span class="line">PASS</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#### ../misc/cgo/errors</span></span></span><br><span class="line">PASS</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#### ../misc/cgo/testsigfwd</span></span></span><br><span class="line">ok      testsigfwd</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#### ../test/bench/go1</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#### ../test</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#### API check</span></span></span><br><span class="line">Go version is "go1.15.6", ignoring -next /home/lu/code/go/api/next.txt</span><br><span class="line"></span><br><span class="line">ALL TESTS PASSED</span><br><span class="line">---</span><br><span class="line">Installed Go for linux/amd64 in /home/lu/code/go</span><br><span class="line">Installed commands in /home/lu/code/go/bin</span><br><span class="line">*** You need to add /home/lu/code/go/bin to your PATH.</span><br><span class="line"></span><br><span class="line">没有发生错误，测试也全部通过，可以看到编译好的可执行程序的位置</span><br></pre></td></tr></table></figure>


<hr>
<h2 id="检查安装"><a href="#检查安装" class="headerlink" title="检查安装"></a>检查安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  src git:(master) cd ..</span><br><span class="line">➜  go git:(master) ls</span><br><span class="line">api  AUTHORS  bin  CONTRIBUTING.md  CONTRIBUTORS  doc  favicon.ico  lib  LICENSE  misc  PATENTS  pkg  README.md  robots.txt  SECURITY.md  src  test  VERSION</span><br><span class="line">➜  go git:(master) cd bin</span><br><span class="line">➜  bin git:(master) ls</span><br><span class="line">go  gofmt</span><br><span class="line">➜  bin git:(master) ./go env</span><br><span class="line">GO111MODULE=""</span><br><span class="line">GOARCH="amd64"</span><br><span class="line">GOBIN="/home/lu/go/bin"</span><br><span class="line">GOCACHE="/home/lu/.cache/go-build"</span><br><span class="line">GOENV="/home/lu/.config/go/env"</span><br><span class="line">GOEXE=""</span><br><span class="line">GOFLAGS=""</span><br><span class="line">GOHOSTARCH="amd64"</span><br><span class="line">GOHOSTOS="linux"</span><br><span class="line">GOINSECURE=""</span><br><span class="line">GOMODCACHE="/home/lu/go/pkg/mod"</span><br><span class="line">GONOPROXY=""</span><br><span class="line">GONOSUMDB=""</span><br><span class="line">GOOS="linux"</span><br><span class="line">GOPATH="/home/lu/go:/home/lu/code/mygopath"</span><br><span class="line">GOPRIVATE=""</span><br><span class="line">GOPROXY="https://proxy.golang.org,direct"</span><br><span class="line">GOROOT="/home/lu/code/go"</span><br><span class="line">GOSUMDB="sum.golang.org"</span><br><span class="line">GOTMPDIR=""</span><br><span class="line">GOTOOLDIR="/home/lu/code/go/pkg/tool/linux_amd64"</span><br><span class="line">GCCGO="gccgo"</span><br><span class="line">AR="ar"</span><br><span class="line">CC="gcc"</span><br><span class="line">CXX="g++"</span><br><span class="line">CGO_ENABLED="1"</span><br><span class="line">GOMOD=""</span><br><span class="line">CGO_CFLAGS="-g -O2"</span><br><span class="line">CGO_CPPFLAGS=""</span><br><span class="line">CGO_CXXFLAGS="-g -O2"</span><br><span class="line">CGO_FFLAGS="-g -O2"</span><br><span class="line">CGO_LDFLAGS="-g -O2"</span><br><span class="line">PKG_CONFIG="pkg-config"</span><br><span class="line">GOGCCFLAGS="-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build196490024=/tmp/go-build -gno-record-gcc-switches"</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">两个版本是有区别的，两个版本共存</span><br><span class="line">➜  bin git:(master) go env</span><br><span class="line">GO111MODULE=""</span><br><span class="line">GOARCH="amd64"</span><br><span class="line">GOBIN="/home/lu/go/bin"</span><br><span class="line">GOCACHE="/home/lu/.cache/go-build"</span><br><span class="line">GOENV="/home/lu/.config/go/env"</span><br><span class="line">GOEXE=""</span><br><span class="line">GOFLAGS=""</span><br><span class="line">GOHOSTARCH="amd64"</span><br><span class="line">GOHOSTOS="linux"</span><br><span class="line">GOINSECURE=""</span><br><span class="line">GOMODCACHE="/home/lu/go/pkg/mod"</span><br><span class="line">GONOPROXY=""</span><br><span class="line">GONOSUMDB=""</span><br><span class="line">GOOS="linux"</span><br><span class="line">GOPATH="/home/lu/go:/home/lu/code/mygopath"</span><br><span class="line">GOPRIVATE=""</span><br><span class="line">GOPROXY="https://proxy.golang.org,direct"</span><br><span class="line">GOROOT="/usr/lib/go"</span><br><span class="line">GOSUMDB="sum.golang.org"</span><br><span class="line">GOTMPDIR=""</span><br><span class="line">GOTOOLDIR="/usr/lib/go/pkg/tool/linux_amd64"</span><br><span class="line">GCCGO="gccgo"</span><br><span class="line">AR="ar"</span><br><span class="line">CC="gcc"</span><br><span class="line">CXX="g++"</span><br><span class="line">CGO_ENABLED="1"</span><br><span class="line">GOMOD=""</span><br><span class="line">CGO_CFLAGS="-g -O2"</span><br><span class="line">CGO_CPPFLAGS=""</span><br><span class="line">CGO_CXXFLAGS="-g -O2"</span><br><span class="line">CGO_FFLAGS="-g -O2"</span><br><span class="line">CGO_LDFLAGS="-g -O2"</span><br><span class="line">PKG_CONFIG="pkg-config"</span><br><span class="line">GOGCCFLAGS="-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build986789214=/tmp/go-build -gno-record-gcc-switches"</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">然后把自己编译的程序连接到bin目录,使用比较方便</span></span><br><span class="line">➜  bin git:(master) cd /bin</span><br><span class="line">➜  bin git:(master) ln -s /home/lu/code/go/bin/go mygo</span><br><span class="line">➜  bin git:(master) mygo env    #检查一下GOROOT对不对，看看是不是/home/lu/code/go</span><br></pre></td></tr></table></figure>


<hr>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">~/code/<span class="keyword">go</span>/src/fmt/<span class="built_in">print</span>.<span class="keyword">go</span>里面添加代码，然后重新编译</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Myputs</span><span class="params">(str <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">	Printf(<span class="string">"My-Go: %s\n"</span>,str)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">创建目录专门为了测试自己的Golang，并加入Gopath，因为用到自己写的库的话，必须要设置GOPATH，否则<span class="keyword">import</span> 找不到， <span class="keyword">import</span> 会去GOPATH找库</span><br><span class="line">在~/code/mygopath/src下面创建文件test.<span class="keyword">go</span>， (不能在~/code/<span class="keyword">go</span>/src目录，因为编译时，src目录下的文件都会被编译)</span><br><span class="line"></span><br><span class="line">文件内容:</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Myputs(<span class="string">"hello"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">直接编译代码即可，竟然不需要手动编译Golang源代码，应该是自动编译了(这也太方便了)</span><br><span class="line">➜  src git:(master) mygo build test.<span class="keyword">go</span></span><br><span class="line">➜  src git:(master) ./test</span><br><span class="line">My-Go: hello     <span class="comment">// 我们写的代码已经起了作用</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="继续测试"><a href="#继续测试" class="headerlink" title="继续测试"></a>继续测试</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">还是修改print.go</span><br><span class="line">添加函数：</span><br><span class="line">func Myfgets(str *string, len int, w io.Reader) int &#123;</span><br><span class="line">	var n int</span><br><span class="line">	var err error</span><br><span class="line">	buf := make([]byte, len)</span><br><span class="line"></span><br><span class="line">	reader := bufio.NewReaderSize(w, len)</span><br><span class="line">	if n, err = reader.Read(buf); err != nil &#123;</span><br><span class="line">	Printf("error reader.Read\n")</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">	*str = string(buf)</span><br><span class="line">	return n</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">➜  src git:(master) cat test.go</span><br><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">	"fmt"</span><br><span class="line">	"os"</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">	var buf string</span><br><span class="line">	fmt.Myputs("hello")</span><br><span class="line"></span><br><span class="line">	fmt.Myfgets(&amp;buf, 10, os.Stdin)</span><br><span class="line">	fmt.Myputs(buf)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">➜  src git:(master) mygo build test.go    #直接编译测试代码，不需手动编译源码，就可以</span><br><span class="line">➜  src git:(master) ./test</span><br><span class="line">My-Go: hello</span><br><span class="line">aaaa</span><br><span class="line">My-Go: aaaa</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
</search>
